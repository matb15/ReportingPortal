@using Models.front

@if (IsVisible)
{
    <div class="fixed inset-0 bg-black/50 z-40"></div>

    <div class="fixed inset-0 flex justify-center items-center z-50 p-4 overflow-y-auto">
        <div class="w-full max-w-3xl bg-white rounded-lg shadow-xl p-8 relative max-h-[95vh] overflow-y-auto">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6">Add Report</h2>
            <EditForm class="flex flex-col md:flex-row gap-8" Model="this" OnValidSubmit="HandleFormSubmit">
                <div class="md:w-1/3">
                    <p class="font-medium text-gray-800 mb-3">What are you reporting?</p>
                    <div class="grid grid-cols-2 sm:grid-cols-1 gap-4">
                        @foreach (var type in ReportTypes)
                        {
                            <button type="button"
                                class="border rounded-lg px-4 py-3 text-center text-sm font-medium
                                       flex flex-col items-center gap-1 transition
                                       @(SelectedType == type ? "bg-gray-800 text-white" : "text-gray-800 bg-gray-100 hover:bg-gray-200")"
                                @onclick="() => HandleTypeSelect(type)">
                                <span class="text-2xl">⚠️</span>
                                @type
                            </button>
                        }
                    </div>
                    @if (SelectedType == "Other")
                    {
                        <p class="text-sm text-gray-500 mt-2">If selecting "Other", please include details in your description.</p>
                    }
                </div>

                <div class="md:w-2/3">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                        <input type="text" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-green-500 focus:outline-none" @bind="Location" />
                    </div>

                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea rows="5" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-green-500 focus:outline-none" @bind="Description"></textarea>
                    </div>

                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Photos (optional)</label>
                        <input type="file" class="w-full text-sm text-gray-700 file:border file:border-gray-300 file:rounded-md file:px-3 file:py-1 file:bg-white file:text-gray-800" />
                    </div>

                    <div class="flex justify-between items-center">
                        <button type="button" class="px-4 py-2 rounded-full border border-gray-300 text-green-600 hover:bg-gray-100 transition" @onclick="HandleCancelClick">
                            Cancel
                        </button>
                        <button type="submit" class="px-6 py-2 rounded-full bg-green-500 text-white hover:bg-green-600 transition disabled:opacity-50"
                            disabled="@string.IsNullOrWhiteSpace(Location) || string.IsNullOrWhiteSpace(Description)">
                            Submit Report
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}
@code {
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<ReportFormModel> OnSubmit { get; set; }

    private string Location = string.Empty;
    private string Description = string.Empty;
    private string SelectedType = string.Empty;
    private bool IsVisible = true;

    private readonly List<string> ReportTypes = new()
    {
        "Dumped Rubbish", "Graffiti or Vandalism", "Pedestrian Hazard", "Traffic Hazard", "Other"
    };

    private void HandleTypeSelect(string type)
    {
        SelectedType = type;
    }

    private async Task HandleCancelClick()
    {
        ResetForm();
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }

    private async Task HandleFormSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            ReportFormModel model = new()
            {
                Location = Location,
                Description = Description,
                Type = ReportTypes.IndexOf(SelectedType) + 1
            };

            await OnSubmit.InvokeAsync(model);
            ResetForm();
        }
    }

    private void ResetForm()
    {
        Location = "";
        Description = "";
        SelectedType = "";
        IsVisible = false;
    }
}
