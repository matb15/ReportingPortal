@using Models
@using Models.enums

@inject CategoryService CategoryService

@if (IsVisible)
{
    <div class="fixed inset-0 bg-black/50 z-40"></div>

    <div class="fixed inset-0 flex justify-center items-center z-50 p-4 overflow-y-auto">
        <div class="w-full max-w-4xl bg-white rounded-2xl shadow-xl p-6 md:p-10 relative max-h-[95vh] overflow-y-auto">
            <h2 class="text-3xl font-bold text-gray-800 mb-8">Submit a Report</h2>

            <EditForm Model="ReportModel" OnValidSubmit="HandleFormSubmit">
                <div class="grid md:grid-cols-3 gap-8">

                    <!-- Category Selector -->
                    <div class="col-span-1">
                        <label class="block text-sm font-semibold text-gray-700 mb-2">Category</label>
                        <input type="text" class="w-full mb-3 px-3 py-2 border rounded-md" placeholder="Search..."
                            @oninput="OnSearchChanged" />

                        <div class="grid grid-cols-2 gap-3 max-h-64 overflow-y-auto pr-2">
                            @foreach (var category in Categories)
                            {
                                <button type="button"
                                    class="border px-3 py-2 rounded-md text-sm flex flex-col items-center
                                                               transition hover:bg-gray-100
                                                               @(ReportModel.CategoryId == category.Id ? "bg-green-600 text-white" : "bg-white")"
                                    @onclick="() => SelectCategory(category)">
                                    <span class="text-xl"><i class="@category.IconClass"></i></span>
                                    <span>@category.Name</span>
                                </button>
                            }
                        </div>

                        @if (HasMoreCategories)
                        {
                            <button class="mt-2 text-sm text-blue-600 hover:underline" @onclick="LoadMoreCategories">Load
                                more...</button>
                        }
                    </div>

                    <!-- Form Fields -->
                    <div class="col-span-2 space-y-5">

                        <!-- Title -->
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-1">Title</label>
                            <InputText class="w-full px-4 py-2 border rounded-md" @bind-Value="ReportModel.Title"
                                required />
                        </div>

                        <!-- Description -->
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-1">Description</label>
                            <InputTextArea rows="5" class="w-full px-4 py-2 border rounded-md"
                                @bind-Value="ReportModel.Description" />
                        </div>

                        <!-- Location Picker -->
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-1">Location</label>
                            <div class="flex gap-2 items-center">
                                <InputText class="w-full px-3 py-2 border rounded-md bg-gray-100"
                                    @bind-Value="ReportModel.LocationDetail" readonly />
                                <button class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
                                    @onclick="OpenMap">
                                    üìç Pick on Map
                                </button>
                            </div>
                        </div>

                        <!-- Image Upload -->
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-1">Photos</label>
                            <InputFile OnChange="HandlePhotoUpload" multiple />
                            @if (UploadedPhotos.Any())
                            {
                                <div class="grid grid-cols-3 gap-4 mt-4">
                                    @foreach (var photo in UploadedPhotos)
                                    {
                                        <img src="@photo.PreviewUrl" class="w-full h-24 object-cover rounded-lg" />
                                    }
                                </div>
                            }
                        </div>

                        <!-- Actions -->
                        <div class="flex justify-between mt-6">
                            <button type="button" class="px-4 py-2 border rounded-full text-gray-600 hover:bg-gray-100"
                                @onclick="HandleCancelClick">
                                Cancel
                            </button>
                            <button type="submit" class="px-6 py-2 bg-green-600 text-white rounded-full hover:bg-green-700"
                                disabled="@(!CanSubmit)">
                                Submit
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    // --- Parameters
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<Report> OnSubmit { get; set; }

    // --- Form Model
    private Report ReportModel = new();

    private List<Category> Categories = new();
    private CategoriesPaginatedRequest CategoryRequest = new()
    {
        Page = 1,
        PageSize = 10,
        Search = ""
    };
    private bool HasMoreCategories = true;
    private List<PhotoUpload> UploadedPhotos = new();
    private bool IsVisible = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task HandleFormSubmit()
    {
        if (ReportModel.CategoryId == 0) return;

        ReportModel.Status = ReportStatusEnum.Pending;
        ReportModel.CreatedAt = DateTime.UtcNow;

        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(ReportModel);
        }

        ResetForm();
    }

    private async Task HandleCancelClick()
    {
        ResetForm();
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }

    private void ResetForm()
    {
        ReportModel = new();
        UploadedPhotos.Clear();
        IsVisible = false;
    }

    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var base64 = Convert.ToBase64String(buffer);

            UploadedPhotos.Add(new PhotoUpload
            {
                File = file,
                PreviewUrl = $"data:{file.ContentType};base64,{base64}"
            });
        }
    }

    private bool CanSubmit => !string.IsNullOrWhiteSpace(ReportModel.Title)
    && !string.IsNullOrWhiteSpace(ReportModel.LocationDetail)
    && ReportModel.CategoryId != 0;

    // --- Location Picker
    private void OpenMap()
    {

    }

    private async Task LoadCategories()
    {
        CategoriesPaginatedResponse result = await CategoryService.GetAllAsync(CategoryRequest);
        if (result == null || result.Items == null || !result.Items.Any())
        {
            HasMoreCategories = false;
            return;
        }

        HasMoreCategories = result.Items.Count == result.PageSize * result.Page;
        Categories.AddRange(result.Items);
    }

    private async Task LoadMoreCategories()
    {
        CategoryRequest.Page++;
        await LoadCategories();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        CategoryRequest.Search = e.Value?.ToString() ?? "";
        CategoryRequest.Page = 1;
        Categories.Clear();
        await LoadCategories();
    }

    private void SelectCategory(Category category)
    {
        ReportModel.CategoryId = category.Id;
    }

    // --- Helper Models
    public class PhotoUpload
    {
        public IBrowserFile File { get; set; } = default!;
        public string PreviewUrl { get; set; } = "";
    }
}
