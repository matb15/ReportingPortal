@page "/register"
@using Models.front
@using System.Text.Json

@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject AuthService authService
@inject EmailVerificationTokenService tokenVerificationService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div>
    <RegisterForm OnRegister="HandleRegister" />
    @if (showEmailConfirmationDiv)
    {
        <div class="bg-yellow-50 border-l-4 border-yellow-400 text-yellow-800 p-4 rounded-lg shadow-sm mt-4 animate-fade-in">
            <div class="flex items-start justify-between">
                <div>
                    <h3 class="text-lg font-medium">Confirm your email</h3>
                    <p class="mt-1 text-sm">
                        Please check your email to confirm your account.
                        <br />
                        Didn’t receive it?
                        <button @onclick="ResendVerificationEmail" class="text-blue-600 hover:underline font-semibold ml-1">
                            Resend email
                        </button>
                    </p>
                </div>
                <div class="ml-4 flex-shrink-0">
                    <svg class="h-6 w-6 text-yellow-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M13 16h-1v-4h-1m1-4h.01M12 2a10 10 0 100 20 10 10 0 000-20z" />
                    </svg>
                </div>
            </div>
        </div>
    }


</div>

@code {
    bool showEmailConfirmationDiv = false;
    int userId = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string? token = await localStorage.GetItemAsync<string>("token");
            if (!string.IsNullOrEmpty(token))
            {
                var userJson = await localStorage.GetItemAsync<string>("user");
                if (!string.IsNullOrEmpty(userJson))
                {
                    var user = JsonSerializer.Deserialize<User>(userJson);
                    if (user != null)
                    {
                        if (user.Role == UserRoleEnum.Admin)
                        {
                            Navigation.NavigateTo("/dashboard");
                        }
                        else
                        {
                            Navigation.NavigateTo("/home");
                        }
                    }
                }
            }
        }
    }

    private async Task HandleRegister(RegisterFormModel model)
    {
        RegisterRequest request = new RegisterRequest
        {
            Email = model.Email,
            Password = model.Password,
            ConfirmPassword = model.ConfirmPassword,
            Name = model.Name,
            Surname = model.Surname,
        };

        try
        {
            RegisterResponse response = await authService.RegisterAsync(request);

            if (response.StatusCode >= 200 && response.StatusCode <= 299)
            {
                Console.WriteLine("Registration successful!");

                showEmailConfirmationDiv = true;
                userId = response.UserId;
            }
            else
            {
                Console.WriteLine($"Registration failed: {response.Message} (Status: {response.StatusCode})");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    private async Task ResendVerificationEmail()
    {
        try
        {
            if (userId == -1)
            {
                Console.WriteLine("User ID is not set. Cannot resend verification email.");
                return;
            }

            await tokenVerificationService.RetryVerificationAsync(userId);
            Console.WriteLine("Verification email resent successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resending verification email: {ex.Message}");
        }
    }
}
