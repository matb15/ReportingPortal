@inherits LayoutComponentBase

@if (IsVisible)
{
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full p-6 relative animate-fade-in border border-gray-200">
            <button class="absolute top-4 right-4 text-gray-400 hover:text-gray-700" @onclick="Close" title="Close">
                <i class="fa-solid fa-xmark text-xl"></i>
            </button>

            <div class="mb-4">
                <h2 class="text-2xl font-semibold text-gray-900 mb-1 flex items-center gap-2">
                    <i class="fa-solid fa-bell text-green-600"></i>
                    @Notification?.Title
                </h2>
                <div class="flex items-center text-sm text-gray-500 space-x-4">
                    <span>
                        <i class="fa-regular fa-clock mr-1"></i>
                        @Notification?.CreatedAt.ToLocalTime().ToString("f")
                    </span>
                    <span class="px-2 py-0.5 rounded-full text-xs font-medium
                                     @(Notification?.Status == NotificationStatusEnum.Unread ? "bg-red-100 text-red-700" : "bg-green-100 text-green-700")">
                        @Notification?.Status
                    </span>
                    <span class="px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-700">
                        @Notification?.Channel
                    </span>
                </div>
            </div>

            <div class="text-gray-700 text-base leading-relaxed border-t pt-4">
                @Notification?.Message
            </div>

            <div class="mt-6 flex justify-end space-x-3">
                <button class="px-4 py-2 text-sm border border-gray-300 text-white rounded hover:bg-red-500 transition bg-red-400"
                        @onclick="Close">
                    Close
                </button>
                @if (Notification?.Status == NotificationStatusEnum.Unread)
                {
                    <button class="px-4 py-2 text-sm bg-green-600 text-white rounded hover:bg-green-700 transition"
                            @onclick="MarkAsRead">
                        <i class="fa-solid fa-envelope-open mr-2"></i> Mark as Read
                    </button>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Notification? Notification { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    [Parameter] public EventCallback<int> OnMarkAsRead { get; set; }

    private async Task Close()
    {
        if (OnClose.HasDelegate)
            await OnClose.InvokeAsync();
    }

    private async Task MarkAsRead()
    {
        if (Notification != null && OnMarkAsRead.HasDelegate)
        {
            await OnMarkAsRead.InvokeAsync(Notification.Id);
        }

        await Close();
    }
}
