@page "/users"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@inject UserService UserService

<div class="p-6">
    <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-semibold text-gray-900">All Users</h2>
        <div class="flex gap-2 items-center">
            <InputSearch SearchText="@SearchText" SearchTextChanged="OnSearchTextChanged" />
        </div>
    </div>

    <div class="overflow-x-auto">
        <table class="min-w-full bg-white shadow rounded-lg overflow-hidden text-sm">
            <thead class="bg-gray-100 text-gray-600">
                <tr>
                    <th class="text-left px-4 py-3 font-semibold">Name</th>
                    <th class="text-left px-4 py-3 font-semibold">Email</th>
                    <th class="text-left px-4 py-3 font-semibold">Role</th>
                    <th class="text-center px-4 py-3 font-semibold">Reports Created</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in PagedUsers)
                {
                    <tr class="border-b hover:bg-gray-50 transition">
                        <td class="px-4 py-3 font-medium text-gray-800">@user.Name</td>
                        <td class="px-4 py-3 text-gray-700">@user.Email</td>
                        <td class="px-4 py-3">
                            <span class="px-2 py-1 rounded-full text-xs font-semibold text-white bg-@user.Role">
                                @user.Role
                            </span>
                        </td>
                        <td class="text-center px-4 py-3 text-green-600 font-semibold">0</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="flex justify-between items-center text-sm text-gray-600 mt-4 px-2">
        <button @onclick="PreviousPage" class="p-2 hover:text-[#66c61c]" disabled="@IsFirstPage">
            <i class="fa-solid fa-chevron-left"></i>
        </button>

        <span>
            @StartIndex–@EndIndex of @TotalCount
        </span>

        <button @onclick="NextPage" class="p-2 hover:text-[#66c61c]" disabled="@IsLastPage">
            <i class="fa-solid fa-chevron-right"></i>
        </button>
    </div>

    @if (users.Count == 0)
    {
        <div class="text-center text-gray-500 py-6">No users available</div>
    }
</div>

@code {
    private List<User> users = new();
    private string SearchText { get; set; } = string.Empty;

    private int Page { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private int TotalCount { get; set; }
    private int StartIndex => users.Count == 0 ? 0 : ((Page - 1) * PageSize) + 1;
    private int EndIndex => Math.Min(Page * PageSize, TotalCount);

    private bool IsFirstPage => Page == 1;
    private bool IsLastPage => Page * PageSize >= TotalCount;

    private IEnumerable<User> PagedUsers => users;

    protected override async Task OnInitializedAsync()
    {
        await FetchUsersAsync();
    }

    private async Task FetchUsersAsync()
    {
        PagedRequest request = new()
        {
            Page = Page,
            PageSize = PageSize,
        };

        UsersPaginatedResponse response = await UserService.GetAllAsync(request);

        users = response.Items ?? new List<User>();
        TotalCount = response.TotalCount;
        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        if (Page > 1)
        {
            Page--;
            await FetchUsersAsync();
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            Page++;
            await FetchUsersAsync();
        }
    }

    private async Task OnSearchTextChanged(string value)
    {
        SearchText = value;
        Page = 1;
        await FetchUsersAsync();
    }
}
