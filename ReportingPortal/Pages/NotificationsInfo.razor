@page "/dashboard/notifications"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using Models.enums
@inject NotificationService NotificationService

<div class="mx-auto px-4 sm:px-8 py-8 bg-white rounded-xl mt-8">
    <Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />
    <Alert AlertData="@AlertData2" OnDismissed="@(() => AlertData2.IsVisible = false)" />

    <div class="flex flex-col md:flex-row md:justify-between md:items-center gap-4 mb-6">
        <div class="flex items-center gap-3">
            <NavLink href="/dashboard" class="flex items-center px-4 py-2 border border-gray-200 rounded-lg text-gray-600 hover:bg-gray-100 transition text-base font-medium shadow-sm" activeClass="">
                <i class="fa-solid fa-arrow-left mr-2"></i> Back
            </NavLink>
            <h2 class="text-2xl md:text-3xl font-bold text-gray-900 ml-2">All Notifications</h2>
        </div>
    </div>

    <div class="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-4 mb-6">
        <div class="flex flex-col w-full sm:w-1/2">
            <label class="text-sm text-gray-600 mb-1">Search by ...</label>
            <InputSearch SearchText="@Search" SearchTextChanged="OnSearchTextChanged" />
        </div>

        <div class="flex flex-row sm:justify-end gap-3 items-end w-full sm:w-auto">
            <div class="flex flex-col w-44">
                <label class="text-sm text-gray-600 mb-1">Filter by status</label>
                <select class="border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c] shadow-sm text-sm"
                        @onchange="OnStatusFilterChanged">
                    <option value="">All</option>
                    @foreach (NotificationStatusEnum status in Enum.GetValues<NotificationStatusEnum>())
                    {
                        <option value="@status">@status</option>
                    }
                </select>
            </div>
            <div class="flex flex-col">
                <label class="text-sm text-gray-600 mb-1">Sort by</label>
                <select class="border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c] shadow-sm text-sm"
                        @onchange="OnSortChanged">
                    <option value="CreatedAtDesc">Newest</option>
                    <option value="CreatedAtAsc">Oldest</option>
                    <option value="TitleAsc">Title ↑</option>
                    <option value="TitleDesc">Title ↓</option>
                </select>
            </div>

            <div class="flex flex-col">
                <label class="text-sm text-gray-600 mb-1">Create</label>
                <button @onclick="ShowCreateNotificationForm"
                        class="flex items-center justify-center px-3 py-2 bg-[#66c61c] text-white rounded-lg shadow-sm hover:bg-[#5ab11b] transition text-sm h-[38px]">
                    <i class="fa-solid fa-plus mr-2"></i> New Notification
                </button>
            </div>
        </div>
    </div>

    @if (IsCreatingNotification)
    {
        <div class="my-6 border rounded-lg p-6 bg-gray-50 shadow-inner">
            <AddNotificationForm OnSubmit="@OnNotificationCreated" OnCancel="@OnCancelCreate" />
        </div>
    }

    <div class="w-full overflow-x-auto rounded-lg border border-gray-200 shadow-sm">
        <table class="w-full bg-white text-sm md:text-base table-auto">
            <thead class="bg-gray-50 text-gray-700">
                <tr>
                    <th class="text-left px-6 py-4 font-semibold">User</th>
                    <th class="text-left px-6 py-4 font-semibold">Title</th>
                    <th class="text-left px-6 py-4 font-semibold">Status</th>
                    <th class="text-left px-6 py-4 font-semibold">Channel</th>
                    <th class="text-left px-6 py-4 font-semibold">Created</th>
                    <th class="text-center px-6 py-4 font-semibold">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var notification in PagedNotifications)
                {
                    <tr class="border-b last:border-b-0 hover:bg-gray-100 transition">
                        <td class="px-6 py-4 text-gray-800">@notification.User.Name @notification.User.Surname</td>
                        <td class="px-6 py-4 text-gray-800">@notification.Title</td>
                        <td class="px-6 py-4 text-gray-800">@notification.Status</td>
                        <td class="px-6 py-4 text-gray-800">@notification.Channel</td>
                        <td class="px-6 py-4 text-gray-800">@notification.CreatedAt.ToLocalTime().ToString("g")</td>
                        <td class="text-center px-6 py-4">
                            <button class="w-10 h-10 flex items-center justify-center rounded-full bg-red-50 hover:bg-red-100 text-red-600 hover:text-red-800 transition"
                                    @onclick="() => ConfirmDeleteNotification(notification.Id)">
                                <i class="fa-solid fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="flex flex-col md:flex-row justify-between items-center text-base text-gray-600 mt-6 px-2 gap-3">
        <button @onclick="PreviousPage"
                class="w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-[#66c61c] hover:text-white transition disabled:opacity-50"
                disabled="@IsFirstPage">
            <i class="fa-solid fa-chevron-left"></i>
        </button>

        <span>
            <span class="font-semibold">@StartIndex–@EndIndex</span> of <span class="font-semibold">@TotalCount</span>
        </span>

        <button @onclick="NextPage"
                class="w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-[#66c61c] hover:text-white transition disabled:opacity-50"
                disabled="@IsLastPage">
            <i class="fa-solid fa-chevron-right"></i>
        </button>
    </div>

    @if (notifications.Count == 0)
    {
        <div class="text-center text-gray-400 py-10 text-lg">No notifications available</div>
    }
</div>

@code {
    private List<Notification> notifications = new();
    private string Search { get; set; } = string.Empty;
    private NotificationStatusEnum? StatusFilter { get; set; } = null;
    private string SortField { get; set; } = "CreatedAt";
    private bool SortAscending { get; set; } = false;

    private int Page { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalCount { get; set; }

    private int StartIndex => notifications.Count == 0 ? 0 : ((Page - 1) * PageSize) + 1;
    private int EndIndex => Math.Min(Page * PageSize, TotalCount);
    private bool IsFirstPage => Page == 1;
    private bool IsLastPage => Page * PageSize >= TotalCount;

    private IEnumerable<Notification> PagedNotifications => notifications;

    private AlertModel AlertData = new();
    private AlertModel AlertData2 = new();
    private bool IsCreatingNotification { get; set; } = false;

    private void ShowCreateNotificationForm() => IsCreatingNotification = true;

    private async Task OnNotificationCreated()
    {
        IsCreatingNotification = false;
        await FetchNotificationAsync();

        AlertData2 = new AlertModel
        {
            IsVisible = true,
            Style = AlertTypeEnum.Information,
            Title = "Success",
            Message = "Report created successfully!",
            Position = AlertStylePositionEnum.BottomRight
        };
    }

    private void OnCancelCreate() => IsCreatingNotification = false;

    protected override async Task OnInitializedAsync()
    {
        await FetchNotificationAsync();
    }

    private async Task FetchNotificationAsync()
    {
        NotificationsPaginatedRequest request = new()
        {
            Page = Page,
            PageSize = PageSize,
            Search = Search,
            SortAscending = SortAscending,
            SortField = SortField,
            Status = StatusFilter
        };

        NotificationsPaginatedResponse response = await NotificationService.GetAllAsync(request);
        notifications = response.Items ?? new List<Notification>();
        TotalCount = response.TotalCount;
        StateHasChanged();
    }

    private async Task OnSearchTextChanged(string value)
    {
        Search = value;
        Page = 1;
        await FetchNotificationAsync();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        var selected = e?.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(selected))
        {
            SortField = selected.Replace("Asc", "").Replace("Desc", "");
            SortAscending = selected.EndsWith("Asc");
            Page = 1;
            await FetchNotificationAsync();
        }
    }

    private async Task OnStatusFilterChanged(ChangeEventArgs e)
    {
        var selected = e?.Value?.ToString();
        if (Enum.TryParse<NotificationStatusEnum>(selected, out var parsed))
        {
            StatusFilter = parsed;
        }
        else
        {
            StatusFilter = null;
        }
        Page = 1;
        await FetchNotificationAsync();
    }

    private async Task PreviousPage()
    {
        if (Page > 1)
        {
            Page--;
            await FetchNotificationAsync();
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            Page++;
            await FetchNotificationAsync();
        }
    }

    private void ConfirmDeleteNotification(int notificationId)
    {
        AlertData = new AlertModel
        {
            IsVisible = true,
            Style = AlertTypeEnum.Warning,
            Message = "Are you sure you want to delete this notification?",
            Title = "Delete Notification",
            Position = AlertStylePositionEnum.Center,
            HasActions = true,
            OkText = "Delete",
            CancelText = "Cancel",
            OnOk = EventCallback.Factory.Create(this, () => DeleteNotification(notificationId)),
            OnCancel = EventCallback.Factory.Create(this, () => AlertData.IsVisible = false)
        };
    }

    private async Task DeleteNotification(int notificationId)
    {
        var result = await NotificationService.DeleteAsync(notificationId);
        if (result.StatusCode >= 200 && result.StatusCode < 300)
        {
            AlertData2 = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Information,
                Message = "Notification deleted successfully.",
                Title = "Success",
                Position = AlertStylePositionEnum.BottomRight
            };
            await FetchNotificationAsync();
        }
        else
        {
            AlertData2 = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Danger,
                Message = result.Message ?? "Failed to delete notification.",
                Title = "Error",
                Position = AlertStylePositionEnum.BottomRight
            };
        }
    }
}
