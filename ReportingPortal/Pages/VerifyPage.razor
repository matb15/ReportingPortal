@page "/verify-email"
@using System.Web
@using System.Collections.Specialized

@inject NavigationManager NavigationManager
@inject EmailVerificationTokenService emailVerificationTokenService

<h3 class="text-2xl font-bold mb-4">Verify Your Token</h3>

@if (IsLoading)
{
    <p class="text-gray-500">Verifying your token, please wait...</p>
}
else if (IsValid == true)
{
    <div class="p-4 mb-4 text-green-700 bg-green-100 rounded">
        Token verified successfully! 🎉
    </div>
}
else if (IsValid == false)
{
    <div class="p-4 mb-4 text-red-700 bg-red-100 rounded">
        Token verification failed. Please check your token and try again.
    </div>
}
else
{
    <p class="text-gray-700">No token provided.</p>
}

@code {
    private bool? IsValid = null;
    private bool IsLoading = true;
    private string? Token;

    protected override async Task OnInitializedAsync()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        NameValueCollection query = HttpUtility.ParseQueryString(uri.Query);
        Token = query.Get("token");

        if (string.IsNullOrEmpty(Token))
        {
            IsLoading = false;
            IsValid = null;
        }
        else
        {
            await VerifyToken(Token);
        }
    }

    private async Task VerifyToken(string token)
    {
        VerificationTokenResponse? result = await emailVerificationTokenService.VerifyTokenAsync(token);

        Console.WriteLine($"Token verification result: {result?.StatusCode} - {result?.Message}");
        Console.WriteLine($"IsValid: {result?.IsValid}");

        if (result != null && (result.StatusCode >= 200 && result.StatusCode <= 299) && result.IsValid == true)
        {
            Console.WriteLine("Account confirmed");

            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Console.WriteLine($"Account confirmation failed: {result?.Message ?? "Unknown error"}");
        }
    }
}
