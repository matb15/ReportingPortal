@using Models
@using Models.enums

@inject NotificationService NotificationService
@inject UserService UserService


<div class="fixed inset-0 bg-black/50 z-40"></div>

<div class="fixed inset-0 flex justify-center items-center z-50 p-4 overflow-y-auto">
    <div class="w-full max-w-3xl bg-white rounded-lg shadow-xl p-8 relative max-h-[95vh] overflow-y-auto">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Add Notification</h2>

        <EditForm Model="@notification" OnValidSubmit="HandleFormSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">User</label>
                    <div class="relative">
                        <input type="text"
                               class="w-full px-4 py-2 border rounded-md"
                               @bind="userSearch"
                               placeholder="Search user by name or email"
                               @oninput="HandleUserInput" />

                        @if (isDropdownVisible && filteredUsers.Any())
                        {
                            <ul class="absolute z-50 bg-white border rounded-md mt-1 w-full shadow-lg max-h-60 overflow-y-auto">
                                @foreach (var user in filteredUsers)
                                {
                                    <li @onclick="() => SelectUser(user)"
                                        class="px-4 py-2 hover:bg-gray-100 cursor-pointer">
                                        @user.Email
                                    </li>
                                }
                            </ul>
                        }

                        @if (notification.UserId > 0)
                        {
                            <p class="mt-1 text-sm text-green-600">Selected user ID: @notification.UserId</p>
                        }
                    </div>

                    <ValidationMessage For="@(() => notification.UserId)" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Title</label>
                    <InputText class="w-full px-4 py-2 border rounded-md" @bind-Value="notification.Title" />
                    <ValidationMessage For="@(() => notification.Title)" />
                </div>

                <div class="md:col-span-2">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Message</label>
                    <InputTextArea class="w-full px-4 py-2 border rounded-md" @bind-Value="notification.Message" Rows="4" />
                    <ValidationMessage For="@(() => notification.Message)" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Channel</label>
                    <InputSelect class="w-full px-4 py-2 border rounded-md" @bind-Value="notification.Channel">
                        @foreach (var channel in Enum.GetValues<NotificationChannelEnum>())
                        {
                            <option value="@channel">@channel</option>
                        }
                    </InputSelect>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                    <InputSelect class="w-full px-4 py-2 border rounded-md" @bind-Value="notification.Status">
                        @foreach (var status in Enum.GetValues<NotificationStatusEnum>())
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="flex justify-between items-center mt-6">
                <button type="button" class="px-4 py-2 rounded-full border border-gray-300 text-red-600 hover:bg-gray-100 transition"
                        @onclick="HandleCancelClick">
                    Cancel
                </button>
                <button type="submit" class="px-6 py-2 rounded-full bg-green-500 text-white hover:bg-green-600 transition">
                    Create Notification
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateNotificationRequest notification = new();

    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<CreateNotificationRequest> OnSubmit { get; set; }

    private async Task HandleFormSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(notification);
            ResetForm();
        }
    }

    private async Task HandleCancelClick()
    {
        ResetForm();
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }

    private string userSearch = string.Empty;
    private List<User> filteredUsers = new();
    private bool isDropdownVisible = false;
    private System.Timers.Timer? debounceTimer;

    protected override void OnInitialized()
    {
        debounceTimer = new System.Timers.Timer(300);
        debounceTimer.AutoReset = false; // important! so it only fires once per start
        debounceTimer.Elapsed += async (_, _) =>
        {
            await InvokeAsync(async () =>
            {
                if (string.IsNullOrWhiteSpace(userSearch))
                {
                    isDropdownVisible = false;
                    filteredUsers.Clear();
                    StateHasChanged();
                    return;
                }

                UsersPaginatedResponse results = await UserService.GetAllAsync(
                    new UsersPaginatedRequest { Search = userSearch, PageSize = 10, Page = 1 }
                );

                filteredUsers = results.Items ?? new();
                isDropdownVisible = true;
                StateHasChanged();
            });
        };
    }

    private void HandleUserInput(ChangeEventArgs e)
    {
        userSearch = e.Value?.ToString() ?? "";
        debounceTimer?.Stop();
        debounceTimer?.Start();
    }

    private void SelectUser(User user)
    {
        notification.UserId = user.Id;
        userSearch = user.Email;
        isDropdownVisible = false;
    }

    private void ResetForm()
    {
        notification = new();
    }
}
