@page "/notifications"

<div class="p-6">
    <h2 class="text-2xl font-semibold mb-4 text-gray-900">Inbox</h2>

    <div class="overflow-x-auto">
        <table class="min-w-full bg-white shadow rounded-lg text-sm">
            <thead class="bg-gray-100 text-gray-600">
                <tr>
                    <th class="px-4 py-3 text-left font-semibold">Title</th>
                    <th class="px-4 py-3 text-left font-semibold">Message</th>
                    <th class="px-4 py-3 text-left font-semibold">Status</th>
                    <th class="px-4 py-3 text-left font-semibold">Date</th>
                </tr>
            </thead>
            <tbody>
                @if (Notifications.Count == 0)
                {
                    <tr>
                        <td colspan="4" class="px-4 py-3 text-center text-gray-500">No notifications</td>
                    </tr>
                }
                else
                {
                    @foreach (var notification in Notifications)
                    {
                        <tr class="border-b hover:bg-gray-50 transition">
                            <td class="px-4 py-3 text-gray-900 font-medium">@notification.Title</td>
                            <td class="px-4 py-3 text-gray-700">@notification.Message</td>
                            <td class="px-4 py-3">
                                <span class="px-2 py-1 text-xs rounded-full
                                    @(notification.Status == NotificationStatusEnum.Unread ? "bg-red-100 text-red-600" : "bg-green-100 text-green-600")">
                                    @notification.Status
                                </span>
                            </td>
                            <td class="px-4 py-3 text-gray-500 text-sm">@notification.CreatedAt.ToString("g")</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="flex justify-between items-center text-sm text-gray-600 mt-4 px-2">
        <button @onclick="PreviousPage" class="p-2 hover:text-[#66c61c]" disabled="@IsFirstPage">
            <i class="fa-solid fa-chevron-left"></i>
        </button>

        <span>@StartIndex–@EndIndex of @TotalCount</span>

        <button @onclick="NextPage" class="p-2 hover:text-[#66c61c]" disabled="@IsLastPage">
            <i class="fa-solid fa-chevron-right"></i>
        </button>
    </div>
</div>

@code {
    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalCount;
    private List<Notification> Notifications = new();

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage * PageSize >= TotalCount;
    private int StartIndex => (CurrentPage - 1) * PageSize + 1;
    private int EndIndex => Math.Min(CurrentPage * PageSize, TotalCount);

    [Inject] private NotificationsService NotificationService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        var response = await NotificationService.GetPaginatedNotificationsAsync(CurrentPage, PageSize);
        if (response == null)
        {
            Notifications = new List<Notification>();
            TotalCount = 0;

            return;
        }

        Notifications = response.Items;
        TotalCount = response.TotalCount;
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadNotifications();
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            await LoadNotifications();
        }
    }
}
