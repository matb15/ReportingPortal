@using Microsoft.AspNetCore.Components.Forms
@using Models.front

@inject UserService userService

@if (IsVisible)
{
    <Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />

    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-3xl shadow-lg p-8 w-full max-w-lg relative max-h-[90vh] overflow-auto">
            <button class="absolute top-4 right-4 text-gray-500 hover:text-gray-700 text-3xl font-bold leading-none"
                    @onclick="CloseModal" aria-label="Close modal">
                &times;
            </button>

            <h3 class="text-2xl font-semibold text-gray-800 mb-6 border-b border-gray-200 pb-3">Change Password</h3>

            <EditForm Model="PasswordModel" OnValidSubmit="OnChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="md:col-span-2">
                        <label class="block mb-2 text-sm font-semibold text-gray-700" for="currentPassword">Current Password</label>
                        <input id="currentPassword" type="password" @bind="PasswordModel.CurrentPassword"
                               class="w-full px-5 py-3 rounded-xl border border-gray-300 bg-gray-50 placeholder-gray-400 focus:outline-none focus:ring-4 focus:ring-lime-300 focus:border-lime-500 transition"
                               placeholder="Enter current password" />
                    </div>

                    <div>
                        <label class="block mb-2 text-sm font-semibold text-gray-700" for="newPassword">New Password</label>
                        <input id="newPassword" type="password" @bind="PasswordModel.NewPassword"
                               class="w-full px-5 py-3 rounded-xl border border-gray-300 bg-gray-50 placeholder-gray-400 focus:outline-none focus:ring-4 focus:ring-lime-300 focus:border-lime-500 transition"
                               placeholder="Enter new password" />
                    </div>

                    <div>
                        <label class="block mb-2 text-sm font-semibold text-gray-700" for="confirmPassword">Confirm Password</label>
                        <input id="confirmPassword" type="password" @bind="PasswordModel.ConfirmPassword"
                               class="w-full px-5 py-3 rounded-xl border border-gray-300 bg-gray-50 placeholder-gray-400 focus:outline-none focus:ring-4 focus:ring-lime-300 focus:border-lime-500 transition"
                               placeholder="Confirm new password" />
                    </div>
                </div>

                <div class="mt-6 text-right">
                    <button type="submit"
                            class="inline-block border-2 border-lime-600 text-lime-600 px-8 py-3 rounded-2xl font-semibold hover:bg-lime-600 hover:text-white transition shadow-sm">
                        Change Password
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {

    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
     
    private AlertModel AlertData = new();

    private ChangePasswordFormModel PasswordModel { get; set; } = new();

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            PasswordModel = new ChangePasswordFormModel();
        }
    }

    private async Task CloseModal()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task OnChangePassword()
    {
        if (PasswordModel.NewPassword != PasswordModel.ConfirmPassword)
        {
            return;
        }


        Response result = await userService.UpdateMePasswordAsync(PasswordModel.CurrentPassword, PasswordModel.NewPassword);

        if (result != null && (result.StatusCode >= 200 && result.StatusCode <= 299))
        {
            AlertData = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Information,
                Message = "Password changed successfully.",
                Title = "Success",
                Position = AlertStylePositionEnum.BottomRight,
            };
        }
        else
        {
            AlertData = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Danger,
                Message = "Failed to change password. Please try again.",
                Title = "Error",
                Position = AlertStylePositionEnum.BottomRight,
            };
        }
        await CloseModal();
    }
}
