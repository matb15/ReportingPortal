@page "/notifications"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
<style>
    .text-link {
        color: #66c61c;
        text-decoration: none;
        transition: color 0.2s;
    }

    .text-link:hover {
        color: #4aa90f;
    }

    .active-text-link {
        color: white !important;
        background-color: #111827 !important;
    }

    .btn-primary {
        background-color: #66c61c;
        color: white;
    }

    .btn-primary:hover {
        background-color: #5ab117;
    }

    .btn-outline {
        border: 1px solid #66c61c;
        color: #66c61c;
    }

    .btn-outline:hover {
        background-color: #66c61c;
        color: white;
    }
</style>

<Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />
<InboxModal Notification="SelectedNotification"
            IsVisible="IsModalOpen"
            OnClose="CloseModal"
            OnMarkAsRead="MarkSingleAsRead" />

<div class="p-6 mx-auto">
    <h2 class="text-3xl font-bold text-gray-900 mb-3">Inbox</h2>

    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-3 gap-2">
        <div class="flex items-center space-x-2">
            <input type="checkbox" id="selectAll" class="form-checkbox w-4 h-4 mt-0.5" @onchange="ToggleSelectAll"
                checked="@AreAllSelected" />
            <label for="selectAll" class="text-sm text-gray-700 font-medium cursor-pointer">Select All</label>
        </div>

        <div class="flex flex-wrap items-center min-h-[40px]">
            @if (SelectedIds.Any())
            {
                <button class="inline-flex items-center bg-blue-100 text-blue-700 px-3 py-1 rounded hover:bg-blue-200 text-sm transition"
                        @onclick=MarkSelectedAsRead>
                    <i class="fa-solid fa-envelope-open mr-2"></i> Mark as Read
                </button>
            }
        </div>
    </div>

    <div class="space-y-3">
        @if (Notifications.Count == 0)
        {
            <div class="text-center text-gray-500 py-10 text-lg">
                <i class="fa-solid fa-inbox fa-2x mb-2 text-gray-400"></i><br />
                No notifications
            </div>
        }
        else
        {
            @foreach (Notification notification in Notifications)
            {
                <div class="bg-white shadow-sm rounded-lg p-4 flex items-center hover:bg-gray-50 transition cursor-pointer"
                     @onclick="@(() => OpenModal(notification))">
                    <div class="flex-shrink-0">
                        <input type="checkbox" class="form-checkbox w-4 h-4 mt-0.5" value="@notification.Id"
                            checked="@SelectedIds.Contains(notification.Id)"
                            @onchange="@(_ => ToggleSelection(notification.Id))" />
                    </div>

                    <div class="flex-1 ml-4">
                        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center">
                            <h3 class="text-base font-semibold text-gray-900">@notification.Title</h3>
                        </div>
                        <p class="text-sm text-gray-700 mt-1">@notification.Message</p>
                    </div>

                    <div class="ml-4 flex-shrink-0 flex items-center space-x-4">
                        <p class="text-xs text-gray-500 mb-0">@notification.CreatedAt.ToString("g")</p>
                        <span class="inline-flex items-center px-2 py-1 text-xs font-medium rounded-full
                                    @(notification.Status == NotificationStatusEnum.Unread
                                                              ? "bg-red-100 text-red-700"
                                                              : "bg-green-100 text-green-700")">
                    <i
                        class="fa-solid @(notification.Status == NotificationStatusEnum.Unread ? "fa-envelope" : "fa-envelope-open") mr-1"></i>
                    @notification.Status
                </span>
            </div>
        </div>
                }
        }
    </div>

    <div class="flex justify-center items-center text-sm text-gray-600 mt-6 space-x-4">
        <button @onclick="PreviousPage" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded flex items-center"
            disabled="@IsFirstPage">
            <i class="fa-solid fa-chevron-left mr-1"></i> Previous
        </button>

        <span class="font-medium">Page @Page</span>

        <button @onclick="NextPage" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded flex items-center"
            disabled="@IsLastPage">
            Next <i class="fa-solid fa-chevron-right ml-1"></i>
        </button>
    </div>
</div>


@code {

    private int Page = 1;
    private int PageSize = 10;
    private int TotalCount;
    private List<Notification> Notifications = new();
    private HashSet<int> SelectedIds = new();

    private AlertModel AlertData = new()
    {
        IsVisible = false,
        Message = string.Empty,
        Title = string.Empty,
    };

    private bool IsFirstPage => Page == 1;
    private bool IsLastPage => Page * PageSize >= TotalCount;
    private bool AreAllSelected => Notifications.All(n => SelectedIds.Contains(n.Id)) && Notifications.Count > 0;

    private string Search { get; set; } = string.Empty;
    private string SortField { get; set; } = "CreatedAt";
    private bool SortAscending { get; set; } = false;
    private NotificationStatusEnum? StatusFilter { get; set; } = null;

    [Inject] private NotificationService NotificationService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        NotificationsPaginatedRequest request = new()
        {
            Page = Page,
            PageSize = PageSize,
            Search = Search,
            SortAscending = SortAscending,
            SortField = SortField,
            Status = StatusFilter
        };

        NotificationsPaginatedResponse response = await NotificationService.GetAllAsync(request);
        if (response == null)
        {
            Notifications.Clear();
            TotalCount = 0;
            return;
        }

        Notifications = response.Items;
        TotalCount = response.TotalCount;
    }

    private async Task PreviousPage()
    {
        if (!IsFirstPage)
        {
            Page--;
            SelectedIds.Clear();
            await LoadNotifications();
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            Page++;
            SelectedIds.Clear();
            await LoadNotifications();
        }
    }

    private void ToggleSelection(int id)
    {
        if (SelectedIds.Contains(id))
            SelectedIds.Remove(id);
        else
            SelectedIds.Add(id);
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        if ((bool)e.Value!)
        {
            foreach (var n in Notifications)
                SelectedIds.Add(n.Id);
        }
        else
        {
            foreach (var n in Notifications)
                SelectedIds.Remove(n.Id);
        }
    }

    private async Task MarkSelectedAsRead()
    {
        foreach(Notification n in Notifications.Where(n => SelectedIds.Contains(n.Id)))
        {

            NotificationResponse response = await NotificationService.MarkAsReadAsync(n.Id);
            if (response.StatusCode < 200 && response.StatusCode >= 300)
            {
                AlertData = new AlertModel
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Danger,
                    Message = $"Failed to mark notification '{n.Title}' as read. Status code: {response.StatusCode}",
                    Title = "Error",
                    Position = AlertStylePositionEnum.BottomRight,
                };
            }
        }

        SelectedIds.Clear();
        await LoadNotifications();
    }

    private Notification? SelectedNotification;
    private bool IsModalOpen = false;

    private void OpenModal(Notification notification)
    {
        SelectedNotification = notification;
        IsModalOpen = true;
    }

    private void CloseModal()
    {
        IsModalOpen = false;
        SelectedNotification = null;
    }

    private async Task MarkSingleAsRead(int notificationId)
    {
        await NotificationService.MarkAsReadAsync(notificationId);
        await LoadNotifications();
    }
}
