@using Microsoft.AspNetCore.Components.Authorization
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS

<nav class="bg-background dark:bg-background-dark shadow">
    <Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />

    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div class="flex h-16 items-center justify-between">
            <div class="flex items-center gap-4">
                <img class="h-8 w-auto" src="/logo.png" alt="Logo" />

                <!-- Theme toggle button -->
                <button @onclick="ToggleTheme" class="text-secondary dark:text-secondary-dark hover:text-primary dark:hover:text-primary-dark transition">
                    <i class="@(_isDarkTheme ? "fa-solid fa-sun" : "fa-solid fa-moon") text-xl"></i>
                </button>

                <!-- Mobile menu toggle -->
                <button @onclick="ToggleMobileMenu"
                        class="sm:hidden p-2 rounded-md text-secondary dark:text-secondary-dark hover:bg-tertiary dark:hover:bg-tertiary-dark hover:text-primary dark:hover:text-primary-dark focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-dark">
                    <span class="sr-only">Toggle menu</span>
                    <i class="fa-solid @( _mobileMenuOpen ? "fa-xmark" : "fa-bars") text-xl"></i>
                </button>
            </div>

            <div class="hidden sm:flex items-center space-x-6">
                @* Auth-based Links *@
                <AuthorizeView>
                    <Authorized>
                        @NavLinkItem("/home", "fa-house", "Home")
                        @NavLinkItem("/notifications", "fa-bell", "Notifications")
                        @NavLinkItem("/profile", "fa-user", "Profile")
                        <button @onclick="LogOut"
                                class="flex items-center gap-2 px-3 py-2 text-sm font-medium text-[#66c61c] dark:text-secondary-dark hover:text-black dark:hover:text-black dark:hover:bg-primary-dark rounded-md transition">
                            <i class="fa-solid fa-right-from-bracket"></i><span>Logout</span>
                        </button>
                    </Authorized>
                    <NotAuthorized>
                        @NavLinkItem("/register", "fa-user-plus", "Register")
                        @NavLinkItem("/login", "fa-right-to-bracket", "Login")
                    </NotAuthorized>
                </AuthorizeView>

                @NavLinkItem("/", "fa-arrow-left", "Access Portal", NavLinkMatch.All)
            </div>
        </div>
    </div>

    @* Mobile menu *@
    <div class="@(_mobileMenuOpen ? "block" : "hidden") sm:hidden px-4 pt-4 pb-6 space-y-2 bg-tertiary dark:bg-tertiary-dark rounded-b-lg shadow">
        <AuthorizeView>
            <Authorized>
                @NavLinkMobile("/home", "Home")
                @NavLinkMobile("/notifications", "Notifications")
                @NavLinkMobile("/profile", "Profile")
                <button @onclick="LogOut"
                        class="block w-full text-left px-4 py-2 text-base font-medium text-secondary dark:text-secondary-dark hover:bg-primary hover:text-white dark:hover:bg-primary-dark rounded-md">
                    Logout
                </button>
            </Authorized>
            <NotAuthorized>
                @NavLinkMobile("/register", "Register")
                @NavLinkMobile("/login", "Login")
            </NotAuthorized>
        </AuthorizeView>

        @NavLinkMobile("/", "Access Portal", NavLinkMatch.All)
    </div>
</nav>

@code {
    private bool _mobileMenuOpen = false;
    private bool _isDarkTheme = false;
    private AlertModel AlertData = new();

    private void ToggleMobileMenu() => _mobileMenuOpen = !_mobileMenuOpen;

    private async Task LogOut()
    {
        await LocalStorage.RemoveItemAsync("token");
        await LocalStorage.RemoveItemAsync("user");

        if (AuthProvider is CustomAuthStateProvider customProvider)
            customProvider.NotifyUserLogout();

        AlertData = new AlertModel
        {
            IsVisible = true,
            Style = AlertTypeEnum.Information,
            Message = "You have been logged out successfully.",
            Title = "Logged Out",
            Position = AlertStylePositionEnum.BottomRight,
        };

        Navigation.NavigateTo("/login", forceLoad: true);
    }

    private async Task ToggleTheme()
    {
        _isDarkTheme = !_isDarkTheme;
        await JS.InvokeVoidAsync("setTheme", _isDarkTheme);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkTheme = await JS.InvokeAsync<bool>("getStoredTheme");
            await JS.InvokeVoidAsync("setTheme", _isDarkTheme);
            StateHasChanged();
        }
    }

    private RenderFragment NavLinkItem(string href, string icon, string label, NavLinkMatch match = NavLinkMatch.Prefix) => __builder =>
{
    __builder.OpenComponent<NavLink>(0);
    __builder.AddAttribute(1, "href", href);
    __builder.AddAttribute(2, "Match", match);
    __builder.AddAttribute(3, "class", "flex items-center gap-2 px-3 py-2 text-sm font-medium text-secondary dark:text-secondary-dark hover:bg-primary hover:text-[#4b5563] dark:hover:bg-primary-dark rounded-md transition");
    __builder.AddAttribute(4, "ActiveClass", "bg-quaternary text-white dark:bg-quaternary-dark dark:text-white");

    __builder.AddAttribute(5, "ChildContent", (RenderFragment)((b) =>
    {
        b.OpenElement(6, "i");
        b.AddAttribute(7, "class", $"fa-solid {icon}");
        b.CloseElement();

        b.OpenElement(8, "span");
        b.AddContent(9, label);
        b.CloseElement();
    }));

    __builder.CloseComponent();
};


    private RenderFragment NavLinkMobile(string href, string label, NavLinkMatch match = NavLinkMatch.Prefix) => __builder =>
{
    __builder.OpenComponent<NavLink>(0);
    __builder.AddAttribute(1, "href", href);
    __builder.AddAttribute(2, "Match", match);
    __builder.AddAttribute(3, "class", "block px-4 py-2 text-base font-medium text-secondary hover:bg-primary hover:text-white dark:hover:bg-primary-dark rounded-md");
    __builder.AddAttribute(4, "ActiveClass", "bg-quaternary text-white");
    __builder.AddAttribute(5, "ChildContent", (RenderFragment)((b) =>
    {
        b.AddContent(6, label);
    }));
    __builder.CloseComponent();
};

}
