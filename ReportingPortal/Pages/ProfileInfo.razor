@page "/profile"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Models.front
@using Models.http
@using System.Text.Json

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject UserService userService
@inject NavigationManager Navigation
@inject ReportService ReportService
@inject IJSRuntime JSRuntime

<Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />

<div class="flex bg-gray-50 h-[93vh]">
    <button 
        class="fixed bottom-4 right-4 md:hidden p-4 bg-[#66c61c] rounded-full shadow-md text-gray-700 focus:outline-none z-50"
        @onclick="() => SidebarVisible = !SidebarVisible">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
             stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round"
                  d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>

    @if (SidebarVisible)
        {
            <div class="fixed inset-0 bg-black opacity-30 md:hidden z-20" @onclick="() => SidebarVisible = false"></div>
        }

    <aside class="@($"fixed z-30 inset-y-0 left-0 transform transition-transform duration-200 ease-in-out bg-white w-64 border-r border-gray-200 p-6 flex-col space-y-6 {(SidebarVisible ? "translate-x-0" : "-translate-x-full")} md:static md:translate-x-0 md:flex")">
        <button class="flex items-center gap-3 px-4 py-3 rounded-lg text-gray-700 font-medium transition 
               hover:bg-[#daf2bf] focus:outline-none focus:ring-2 focus:ring-[#66c61c]
               @(ActiveTab == "edit" ? "bg-[#66c61c] text-white shadow-md" : "")"
        @onclick="SetEditActiveTab">
            Edit Profile
        </button>

        <button class="flex items-center gap-3 px-4 py-3 rounded-lg text-gray-700 font-medium transition 
                       hover:bg-[#daf2bf] focus:outline-none focus:ring-2 focus:ring-[#66c61c]
                       @(ActiveTab == "reports" ? "bg-[#66c61c] text-white shadow-md" : "")"
                @onclick="SetReportActiveTab">
            My Reports
        </button>

        <button class="flex items-center gap-3 px-4 py-3 rounded-lg text-gray-700 font-medium transition hover:bg-[#daf2bf] focus:outline-none focus:ring-2 focus:ring-[#66c61c]"
                @onclick="() => ChangePasswordVisible = true">
            Change Password
        </button>

        <button class="flex items-center gap-3 px-4 py-3 rounded-lg text-red-600 font-semibold hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-400"
                @onclick="ShowDeleteConfirm">
            Delete Account
        </button>
    </aside>

        <main class="flex-1 overflow-y-auto p-8">
            @if (ActiveTab == "edit")
            {
                <h2 class="text-2xl font-semibold text-gray-900 mb-6 border-b border-gray-300 pb-2">Modifica il tuo profilo</h2>

                <EditForm Model="_user" OnValidSubmit="UpdateProfile" class="space-y-6 max-w-3xl">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="name" class="block mb-1 font-medium text-gray-700">Nome</label>
                            <input id="name" type="text" @bind="_user.Name"
                                   class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:border-indigo-500" />
                        </div>

                        <div>
                            <label for="surname" class="block mb-1 font-medium text-gray-700">Cognome</label>
                            <input id="surname" type="text" @bind="_user.Surname"
                                   class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:border-indigo-500" />
                        </div>

                        <div class="md:col-span-2">
                            <label for="email" class="block mb-1 font-medium text-gray-700">Email</label>
                            <input id="email" type="email" @bind="email" disabled
                                   class="w-full border border-gray-200 bg-gray-100 rounded-md px-4 py-2 text-gray-500" />
                        </div>
                    </div>

                    <button type="submit" class="inline-flex items-center gap-2 px-6 py-3 bg-[#66c61c] hover:bg-[#57b219] text-white font-semibold rounded-md shadow-md transition focus:outline-none focus:ring-2 focus:ring-[#66c61c]">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                        </svg>
                        Save Pending Changes
                    </button>
                </EditForm>
            }
            else if (ActiveTab == "reports")
            {
                <h2 class="text-2xl font-semibold text-gray-900 mb-4">I Miei Report</h2>

                <div id="reportScrollContainer" class="mb-6 flex flex-wrap gap-6">
                    <div class="bg-[#daf2bf] text-[#4f7a0c] px-4 py-2 rounded-lg font-semibold">
                        Totale Report: @ReportAnalytics?.TotalReports
                    </div>
                    <div class="bg-green-100 text-green-800 px-4 py-2 rounded-lg font-semibold">
                        Resolved: @ReportAnalytics?.ResolvedReports
                    </div>
                    <div class="bg-yellow-100 text-yellow-800 px-4 py-2 rounded-lg font-semibold">
                        Pending: @ReportAnalytics?.PendingReports
                    </div>
                    <div class="bg-red-100 text-red-800 px-4 py-2 rounded-lg font-semibold">
                        Rejected: @ReportAnalytics?.RejectedReports
                    </div>
                </div>


                <div class="mb-6 flex flex-col sm:flex-row sm:items-end sm:justify-between gap-4">
                    <div class="flex flex-col w-full sm:w-1/2">
                        <label class="text-sm text-gray-600 mb-1">Search by ...</label>
                        <InputSearch SearchText="@Request.Search" SearchTextChanged="OnSearchTextChanged" />
                    </div>

                    <div class="flex flex-col w-44">
                        <label class="text-sm text-gray-600 mb-1">Filter by status</label>
                        <select class="border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c] shadow-sm text-sm" @onchange="OnStatusFilterChanged">
                            <option value="">All Status</option>
                            @foreach (ReportStatusEnum status in Enum.GetValues<ReportStatusEnum>())
                            {
                                <option value="@status.ToString()" selected="@(status == Request.Status)">
                                    @status
                                </option>
                            }
                        </select>
                    </div>

                    <div class="flex flex-col w-44">
                        <label class="text-sm text-gray-600 mb-1">Sort reports</label>
                        <select class="border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c] shadow-sm text-sm" @onchange="OnSortChanged">
                            <option value="CreatedAtDesc">Newest</option>
                            <option value="CreatedAtAsc">Oldest</option>
                            <option value="StatusAsc">Status ↑</option>
                            <option value="StatusDesc">Status ↓</option>
                        </select>
                    </div>
                </div>

                <div class="grid gap-6 max-h-[65vh] overflow-y-auto
                            grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5">
                    @if (Reports.Count == 0 && !IsLoadingMore)
                    {
                        <p class="text-center text-gray-500 mt-20">No Report Available</p>
                    }
                    else
                    {
                        @foreach (var report in Reports)
                        {
                            <div class="bg-white rounded-xl shadow p-4 flex flex-col">
                                <div class="w-full h-48 bg-gray-100 rounded-lg mb-3 overflow-hidden flex items-center justify-center">
                                    <img src="@(string.IsNullOrWhiteSpace(report?.File?.FilePath) ? "https://placehold.co/600x400" : report.File.FilePath)"
                                     alt="Report image"
                                     class="w-full h-full object-cover" />

                                </div>

                                <div class="flex-1 text-sm text-gray-700">
                                    <h3 class="text-base font-semibold text-gray-800 mb-2 line-clamp-1">
                                        @(string.IsNullOrWhiteSpace(report?.Title) ? "Untitled Report" : report.Title)
                                    </h3>

                                    <div class="grid grid-cols-2 gap-x-4 gap-y-1 text-sm">
                                        <div>
                                            <span class="font-semibold text-gray-800">Location:</span>
                                            <p class="text-gray-600 truncate cursor-pointer hover:underline" title="@report?.Location"
                                                @onclick="@(() => CopyToClipboard(report?.Location))">
                                                 @(string.IsNullOrWhiteSpace(report?.Location) ? "Unknown" : report.Location)
                                            </p>
                                        </div>

                                        <div>
                                            <span class="font-semibold text-gray-800">Category:</span>
                                            <span class="ml-1 text-gray-600">
                                                @(report?.Category?.Name ?? "N/A")
                                            </span>
                                        </div>

                                        <div>
                                            <span class="font-semibold text-gray-800">Date:</span>
                                            <span class="ml-1 text-gray-600">
                                                @report?.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd")
                                            </span>
                                        </div>

                                        <div>
                                            <span class="font-semibold text-gray-800">Status:</span>
                                            <span class="ml-1 inline-block px-2 py-0.5 text-xs font-semibold rounded-full
                                                @(report?.Status switch {
                                                    ReportStatusEnum.Resolved => "bg-green-100 text-green-700",
                                                    ReportStatusEnum.Pending => "bg-yellow-100 text-yellow-700",
                                                    _ => "bg-gray-100 text-gray-700"
                                                })">
                                                @report?.Status
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <button @onclick="@(() => GoToReportDetail(report?.Id))"
                                        class="mt-4 w-full bg-[#66c61c] hover:bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium flex items-center justify-center gap-2">
                                    <i class="fa-solid fa-right-to-bracket"></i> View Detail
                                </button>
                            </div>
                        }
                    }

                    @if (IsLoadingMore)
                    {
                        <p class="text-center text-gray-500 py-4">Loading...</p>
                    }
                </div>

            }

            <ChangePasswordModal IsVisible="@ChangePasswordVisible"
                                 IsVisibleChanged="@(visible => this.ChangePasswordVisible = visible)" />

            @if (DeleteConfirmVisible)
            {
                <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-40">
                    <div class="bg-white rounded-xl shadow-xl max-w-md w-full p-8">
                        <div class="flex items-center mb-5 gap-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-red-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            <h3 class="text-xl font-semibold text-gray-900">Delete Account</h3>
                        </div>
                        <p class="text-gray-700 mb-6">Are you sure you want to delete your account? This action is irreversible.</p>
                        <div class="flex justify-end gap-4">
                            <button @onclick="() => DeleteConfirmVisible = false"
                                    class="px-5 py-2 rounded-lg bg-gray-200 text-gray-700 font-semibold hover:bg-gray-300 transition">
                                Cancel
                            </button>
                            <button @onclick="DeleteAccount"
                                    class="px-5 py-2 rounded-lg bg-red-600 text-white font-semibold hover:bg-red-700 transition">
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            }

        </main>
    </div>

@code {
    string ActiveTab = "edit";
    bool SidebarVisible = true;

    private UserPutModel _user = new();
    private string email = string.Empty;
    private bool ChangePasswordVisible { get; set; } = false;
    private bool DeleteConfirmVisible { get; set; } = false;
    private AlertModel AlertData = new();
    private ReportAnalyticsResponse? ReportAnalytics;

    List<ReportDto> Reports = new();
    bool IsLoadingMore = false;
    bool AllLoaded = false;
    ReportsPaginatedRequest Request = new()
    {
        Page = 1,
        PageSize = 10,
        Search = string.Empty,
        Status = null,
        SortField = "CreatedAt",
        SortAscending = false,
        IsPersonal = true
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addScrollListener", DotNetObjectReference.Create(this));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string? userJson = await localStorage.GetItemAsync<string>("user");
        if (!string.IsNullOrEmpty(userJson))
        {
            User? deserializedUser = JsonSerializer.Deserialize<User>(userJson);
            if (deserializedUser != null)
            {
                _user = new UserPutModel
                {
                    Name = deserializedUser.Name,
                    Surname = deserializedUser.Surname,
                    Role = deserializedUser.Role,
                    CreatedAt = deserializedUser.CreatedAt,
                    UpdatedAt = deserializedUser.UpdatedAt
                };
                email = deserializedUser.Email;
            }
        }

        UserResponse result = await userService.GetMeAsync();

        if (result != null && (result.StatusCode >= 200 && result.StatusCode <= 299) && result.User != null)
        { 
            _user = new UserPutModel
            {
                Name = result.User.Name,
                Surname = result.User.Surname,
                Role = result.User.Role,
                CreatedAt = result.User.CreatedAt,
                UpdatedAt = result.User.UpdatedAt
            };
            email = result.User.Email;

            await localStorage.SetItemAsync("user", JsonSerializer.Serialize(result.User));
        }
        else
        {
            Console.WriteLine($"User info fetch failed: {result?.Message ?? "Unknown error"}");
        }
    }

    private async Task OnSearchTextChanged(string value)
    {
        Request.Search = value;
        ResetPagination();
        await LoadReportsAsync();
    }

    private void ResetPagination()
    {
        Reports.Clear();
        Request.Page = 1;
        AllLoaded = false;
    }

    private async Task OnStatusFilterChanged(ChangeEventArgs e)
    {
        string? selectedStatus = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(selectedStatus))
        {
            Request.Status = null;
        }
        else
        {
            if (Enum.TryParse<ReportStatusEnum>(selectedStatus, out var status))
            {
                Request.Status = status;
            }
            else
            {
                Request.Status = null;
            }
        }
        ResetPagination();
        await LoadReportsAsync();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        string? selected = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(selected))
        {
            if (selected.StartsWith("CreatedAt"))
            {
                Request.SortField = "CreatedAt";
                Request.SortAscending = selected.EndsWith("Asc");
            }
            else if (selected.StartsWith("Status"))
            {
                Request.SortField = "Status";
                Request.SortAscending = selected.EndsWith("Asc");
            }

            ResetPagination();

            await LoadReportsAsync();
        }
    }

    private async void UpdateProfile()
    {
        _user.UpdatedAt = DateTime.UtcNow;

        UserResponse result = await userService.UpdateMeAsync(_user);

        if (result != null && (result.StatusCode >= 200 && result.StatusCode <= 299) && result.User != null)
        {
            AlertData = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Information,
                Message = "User information updated successfully!",
                Title = "Profile Info",
                Position = AlertStylePositionEnum.BottomRight,
            };

            _user = new UserPutModel
            {
                Name = result.User.Name,
                Surname = result.User.Surname,
                Role = result.User.Role,
                CreatedAt = result.User.CreatedAt,
                UpdatedAt = result.User.UpdatedAt
            };
            email = result.User.Email;

            await localStorage.SetItemAsync("user", JsonSerializer.Serialize(result.User));
        }
        else
        {
            AlertData = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Danger,
                Message = result?.Message ?? "Failed to update user information. Please try again.",
                Title = "Update Failed",
                Position = AlertStylePositionEnum.BottomRight,
            };
            Console.WriteLine($"User update failed: {result?.Message ?? "Unknown error"}");
        }
    }

    private void ShowDeleteConfirm()
    {
        DeleteConfirmVisible = true;
    }

    private async void DeleteAccount()
    {
        Response result = await userService.DeleteMeAsync();
        if (result == null || (result.StatusCode < 200 || result.StatusCode >= 300))
        {
            AlertData = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Danger,
                Message = result?.Message ?? "Failed to delete account. Please try again.",
                Title = "Delete Failed",
                Position = AlertStylePositionEnum.BottomRight,
            };
            return;
        }

        DeleteConfirmVisible = false;
        AlertData = new AlertModel
        {
            IsVisible = true,
            Style = AlertTypeEnum.Information,
            Message = "Account deleted successfully.",
            Title = "Account Deleted",
            Position = AlertStylePositionEnum.BottomRight,
        };

        await localStorage.RemoveItemAsync("user");
        await localStorage.RemoveItemAsync("token");

        Navigation.NavigateTo("/login", true);
    }

    void SetEditActiveTab()
    {
        ActiveTab = "edit";
    }

    async Task SetReportActiveTab()
    {
        ActiveTab = "reports";

        if (Reports.Count == 0)
        {
            ResetPagination();
            await LoadReportsAsync();       
            await LoadReportAnalytics();
        }

        await Task.Delay(1000);
        await JSRuntime.InvokeVoidAsync("addScrollListener", DotNetObjectReference.Create(this));
    }

    private async Task LoadReportsAsync()
    {
        if (AllLoaded || IsLoadingMore) return;

        IsLoadingMore = true;

        var newReports = await ReportService.GetAllAsync(Request);

        if (newReports?.Items == null || newReports.Items.Count == 0)
        {
            AllLoaded = true;
        }
        else
        {
            Reports.AddRange(newReports.Items);
            Request.Page++;
        }

        IsLoadingMore = false;
    }


    [JSInvokable]
    public async Task LoadMoreReports()
    {
        if (ActiveTab != "reports" || IsLoadingMore || AllLoaded) return;

        await LoadReportsAsync();
        StateHasChanged();
    }


    private async Task LoadReportAnalytics()
    {
        var analytics = await ReportService.GetReportAnalyticsAsync(true);
        if (analytics != null && analytics.StatusCode >= 200 && analytics.StatusCode <= 299)
        {
            ReportAnalytics = analytics;
        }
        else
        {
            Console.WriteLine($"Failed to load report analytics: {analytics?.Message ?? "Unknown error"}");
        }
    }

    private async Task CopyToClipboard(string? text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }

    private void GoToReportDetail(int? reportId) => Navigation.NavigateTo($"/report/{reportId}");
}