@page "/home"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Models.front
@using System.Security.Claims
@using System.Text.Json

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject CustomAuthStateProvider AuthProvider
@inject NotificationService notificationService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ReportService ReportService

<style>
    .text-link {
        color: #22c55e;
        font-size: 0.875rem;
        font-weight: 500;
        text-decoration: none;
    }

    .text-link:hover {
        text-decoration: underline;
    }

    .map-link {
      background-color: #22c55e;
      font-size: 0.875rem;
      font-weight: 500;
      text-decoration: none;
      color: white;
      position: absolute;
      bottom: 1.5rem;
      right: 1rem;
      padding: 0.5rem 0.75rem;
      border-radius: 0.5rem;
      z-index: 5000;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid white;

      transition: transform 0.2s ease-in-out;
    }

    .map-link:hover {
      transform: scale(1.1);
    }

</style>

<Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />
<div class="p-4 bg-gray-50 space-y-4">
    @if (showAddReportForm)
    {
         <AddReportForm OnCancel="HideAddReportForm" OnSubmit="OnReportCreated" />
     }
    else
    {
        <div class="flex items-center border-b border-gray-200 pb-2">
            <div class="flex space-x-2">
                <button @onclick="SelectMapTab"
                    class="@($"px-4 py-2 font-medium text-sm border-b-2 {(selectedTab == "map" ? "border-[#66c61c] text-[#66c61c]" : "border-transparent text-gray-500")}")">
                    Map
                </button>

                <button @onclick="SelectReportsTab"
                    class="@($"px-4 py-2 font-medium text-sm border-b-2 {(selectedTab == "reports" ? "border-[#66c61c] text-[#66c61c]" : "border-transparent text-gray-500")}")">
                    Reports
                </button>
            </div>

            <button @onclick="ToggleHeatmap"
                    class="absolute top-4 right-4 z-[5001] bg-white text-gray-800 px-3 py-1.5 border border-gray-300 rounded-md shadow hover:bg-gray-100 text-sm">
                @(isHeatmapVisible ? "Hide Heatmap" : "Show Heatmap")
            </button>


            <button @onclick="ShowAddReportForm"
                class="ml-auto inline-flex items-center gap-2 bg-[#66c61c] text-white px-4 py-2 rounded-md shadow hover:bg-[#57ac16] transition"
                title="Create a new report" aria-label="Create new report">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
                </svg>
                New Report
            </button>
        </div>


        @if (selectedTab == "map")
        {
            <div class="relative mt-4 h-[82vh]" id="map">
                <NavLink href="/map"
                         class="map-link">
                    <i class="fa-solid fa-expand"></i>
                </NavLink>
            </div>
        }

        @if (selectedTab == "reports")
        {
            <div id="reportScrollContainer" style="max-height: 80vh; overflow-y: auto;" class="mt-4 pr-1">
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-5 gap-4">
                   @foreach (var report in reports)
                    {
                        <div class="bg-white rounded-xl shadow p-4 flex flex-col">
                            <div class="w-full h-48 bg-gray-100 rounded-lg mb-3 overflow-hidden flex items-center justify-center">
                                <img src="@(string.IsNullOrWhiteSpace(report?.File?.FilePath) ? "https://placehold.co/600x400" : report.File.FilePath)"
                                 alt="Report image"
                                 class="w-full h-full object-cover" />

                            </div>

                            <div class="flex-1 text-sm text-gray-700">
                                <h3 class="text-base font-semibold text-gray-800 mb-2 line-clamp-1">
                                    @(string.IsNullOrWhiteSpace(report?.Title) ? "Untitled Report" : report.Title)
                                </h3>

                                <div class="grid grid-cols-2 gap-x-4 gap-y-1 text-sm">
                                    <div>
                                        <span class="font-semibold text-gray-800">Location:</span>
                                        <p class="text-gray-600 truncate cursor-pointer hover:underline" title="@report?.Location"
                                            @onclick="@(() => CopyToClipboard(report?.Location))">
                                             @(string.IsNullOrWhiteSpace(report?.Location) ? "Unknown" : report.Location)
                                        </p>
                                    </div>

                                    <div>
                                        <span class="font-semibold text-gray-800">Category:</span>
                                        <span class="ml-1 text-gray-600">
                                            @(report?.Category?.Name ?? "N/A")
                                        </span>
                                    </div>

                                    <div>
                                        <span class="font-semibold text-gray-800">Date:</span>
                                        <span class="ml-1 text-gray-600">
                                            @report?.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd")
                                        </span>
                                    </div>

                                    <div>
                                        <span class="font-semibold text-gray-800">Status:</span>
                                        <span class="ml-1 inline-block px-2 py-0.5 text-xs font-semibold rounded-full
                                            @(report?.Status switch {
                                                ReportStatusEnum.Resolved => "bg-green-100 text-green-700",
                                                ReportStatusEnum.Pending => "bg-yellow-100 text-yellow-700",
                                                _ => "bg-gray-100 text-gray-700"
                                            })">
                                            @report?.Status
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <button @onclick="@(() => GoToReportDetail(report?.Id))"
                                    class="mt-4 w-full bg-[#66c61c] hover:bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium flex items-center justify-center gap-2">
                                <i class="fa-solid fa-right-to-bracket"></i> View Detail
                            </button>
                        </div>
                    }

                </div>

                @if (isLoadingMore)
                {
                    <div class="text-center py-4 text-gray-500">Loading more...</div>
                }
                else if (allLoaded)
                {
                    <div class="text-center py-4 text-gray-400">No more reports.</div>
                }
            </div>  
        }
    }
</div>


@code {
    private static Home? _instance;
    private string selectedTab = "map";

    private bool showAddReportForm = false;
    private List<ReportDto> reports = new();

    private int page = 1;
    private const int pageSize = 10;
    private bool isLoadingMore = false;
    private bool allLoaded = false;
    private AlertModel AlertData = new();

    private void ShowAddReportForm()
    {
        selectedTab = "reports";        
        showAddReportForm = true;
    }

    private async Task HideAddReportForm()
    {
        await JSRuntime.InvokeVoidAsync("MAP.initMap");
        showAddReportForm = false;
    }

    private void GoToReportDetail(int? reportId) => Navigation.NavigateTo($"/report/{reportId}");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("MAP.initMap");

            _instance = this;

            string? userJson = await localStorage.GetItemAsync<string>("user");
            if (!string.IsNullOrEmpty(userJson))
            {
                var user = JsonSerializer.Deserialize<User>(userJson);
                if (user != null && !string.IsNullOrEmpty(user.Email))
                {
                    await JSRuntime.InvokeVoidAsync("registerPushNotifications", user.Email);
                }
            }

            await FetchInitialReports();

            await JSRuntime.InvokeVoidAsync("addScrollListener",
                DotNetObjectReference.Create(this));

            StateHasChanged();
        }
    }

    private async Task OnReportCreated((MultipartFormDataContent content, int? id) report)
    {
        ReportResponse response = await ReportService.CreateAsync(report.content);
        if(response.StatusCode >= 200 && response.StatusCode < 300)
        {
            AlertData = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Information,
                Title = "Success",
                Message = "Report created successfully!",
                Position = AlertStylePositionEnum.BottomRight
            };

            await HideAddReportForm();
        }
        else
        {
            AlertData = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Danger,
                Title = "Error",
                Message = response.Message ?? "An error occurred while creating the report.",
                Position = AlertStylePositionEnum.BottomRight
            };
        }

        await JSRuntime.InvokeVoidAsync("MAP.initMap");
        reports.Clear();
        page = 1;

        await FetchInitialReports();
    }

    private async Task FetchInitialReports()
    {
        var response = await ReportService.GetAllAsync(new ReportsPaginatedRequest
        {
            Page = page,
            PageSize = pageSize
        });

        if (response.Items != null && response.Items.Any())
        {
            reports.AddRange(response.Items);
            page++;
        }
        else
        {
            allLoaded = true;
        }
    }

    [JSInvokable]
    public async Task LoadMoreReports()
    {
        if (isLoadingMore || allLoaded) return;

        isLoadingMore = true;
        StateHasChanged();

        var response = await ReportService.GetAllAsync(new ReportsPaginatedRequest
        {
            Page = page,
            PageSize = pageSize
        });

        if (response.Items != null && response.Items.Any())
        {
            reports.AddRange(response.Items);
            page++;
        }
        else
        {
            allLoaded = true;
        }

        isLoadingMore = false;
        StateHasChanged();
    }

    private async Task SelectMapTab()
    {
        selectedTab = "map";
        await JSRuntime.InvokeVoidAsync("MAP.initMap");
    }
    private async Task CopyToClipboard(string? text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private bool isHeatmapVisible = true;

    private async Task ToggleHeatmap()
    {
        isHeatmapVisible = !isHeatmapVisible;
        await JSRuntime.InvokeVoidAsync("MAP.toggleHeatmap", isHeatmapVisible);
    }
    private async Task SelectReportsTab()
    {
        selectedTab = "reports";
        await Task.Delay(1000);
        await JSRuntime.InvokeVoidAsync("addScrollListener", DotNetObjectReference.Create(this));
    }

}
