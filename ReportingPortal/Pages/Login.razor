@page "/login"

@using Models.front
@using Models.http
@using System.Text.Json

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthService authService
@inject NavigationManager Navigation

<div>
    <LoginForm OnLogin="HandleLogin" />
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string? token = await localStorage.GetItemAsync<string>("token");
            if (!string.IsNullOrEmpty(token))
            {
                var userJson = await localStorage.GetItemAsync<string>("user");
                if (!string.IsNullOrEmpty(userJson))
                {
                    var user = JsonSerializer.Deserialize<User>(userJson);
                    if (user != null)
                    {
                        if (user.Role == UserRoleEnum.Admin)
                        {
                            Navigation.NavigateTo("/dashboard");
                        }
                        else
                        {
                            Navigation.NavigateTo("/home");
                        }
                    }
                }
            }
        }
    }

    private async Task HandleLogin(LoginFormModel model)
    {
        Console.WriteLine($"Email: {model.Email}, Password: {model.Password}");

        LoginResponse result = await authService.LoginAsync(model.Email, model.Password);

        if (result != null && (result.StatusCode >= 200 && result.StatusCode <= 299) && !string.IsNullOrEmpty(result.Token))
        {
            await localStorage.SetItemAsync("token", result.Token);
            await localStorage.SetItemAsync("user", JsonSerializer.Serialize(result.User));
            Console.WriteLine("Login successful!");

            if (result.User.Role == UserRoleEnum.Admin)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                Navigation.NavigateTo("/home");
            }
        }
        else
        {
            Console.WriteLine($"Login failed: {result?.Message ?? "Unknown error"}");
        }
    }

}
