@page "/login"

@using Models.front
@using Models.http
@using System.Text.Json

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthService authService
@inject EmailVerificationTokenService tokenVerificationService
@inject NavigationManager Navigation
@inject CustomAuthStateProvider _authStateProvider

<div>
    <LoginForm OnLogin="HandleLogin" />
    @if (showEmailConfirmationDiv)
    {
        <div class="bg-yellow-50 border-l-4 border-yellow-400 text-yellow-800 p-4 rounded-lg shadow-sm mt-4 animate-fade-in">
            <div class="flex items-start justify-between">
                <div>
                    <h3 class="text-lg font-medium">Confirm your email</h3>
                    <p class="mt-1 text-sm">
                        Please check your email to confirm your account.
                        <br />
                        Didn’t receive it?
                        <button @onclick="ResendVerificationEmail" class="text-blue-600 hover:underline font-semibold ml-1">
                            Resend email
                        </button>
                    </p>
                </div>
                <div class="ml-4 flex-shrink-0">
                    <svg class="h-6 w-6 text-yellow-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M13 16h-1v-4h-1m1-4h.01M12 2a10 10 0 100 20 10 10 0 000-20z" />
                    </svg>
                </div>
            </div>
        </div>
    }


</div>

@code {

    bool showEmailConfirmationDiv = false;
    int userId = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string? token = await localStorage.GetItemAsync<string>("token");
            if (!string.IsNullOrEmpty(token))
            {
                string? userJson = await localStorage.GetItemAsync<string>("user");
                if (!string.IsNullOrEmpty(userJson))
                {
                    User? user = JsonSerializer.Deserialize<User>(userJson);
                    if (user != null)
                    {
                        if (user.Role == UserRoleEnum.Admin)
                        {
                            Navigation.NavigateTo("/dashboard");
                        }
                        else
                        {
                            Navigation.NavigateTo("/home");
                        }
                    }
                }
            }
        }
    }

    private async Task HandleLogin(LoginFormModel model)
    {
        Console.WriteLine($"Email: {model.Email}, Password: {model.Password}");

        LoginResponse result = await authService.LoginAsync(model.Email, model.Password);

        if (result != null && (result.StatusCode >= 200 && result.StatusCode <= 299) && !string.IsNullOrEmpty(result.Token))
        {
            await localStorage.SetItemAsync("token", result.Token);
            await localStorage.SetItemAsync("user", JsonSerializer.Serialize(result.User));

            ((CustomAuthStateProvider)_authStateProvider).NotifyUserAuthentication(result.Token);

            Console.WriteLine("Login successful!");

            if (result.User.Role == UserRoleEnum.Admin)
            {
                Navigation.NavigateTo("/dashboard", forceLoad: true);
            }
            else
            {
                Navigation.NavigateTo("/home", forceLoad: true);
            }
        }
        else
        {
            Console.WriteLine($"Login failed: {result?.Message ?? "Unknown error"}");

            if (result?.StatusCode == 403)
            {
                showEmailConfirmationDiv = true;
                if (result.User != null)
                {
                    userId = result.User.Id;
                    Console.WriteLine($"User ID: {userId}");
                }
                else
                {
                    Console.WriteLine("User information is not available.");
                }
            }
            else
            {
                showEmailConfirmationDiv = false;
            }
        }
    }

    private async Task ResendVerificationEmail()
    {
        try
        {
            if (userId == -1)
            {
                Console.WriteLine("User ID is not set. Cannot resend verification email.");
                return;
            }

            await tokenVerificationService.RetryVerificationAsync(userId);
            Console.WriteLine("Verification email resent successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resending verification email: {ex.Message}");
        }
    }
}
