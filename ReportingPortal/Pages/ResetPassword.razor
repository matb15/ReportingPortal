@page "/reset-password"
@inject NavigationManager NavigationManager
@inject UserService UserService

<PageTitle>Reset Password</PageTitle>

<div class="min-h-screen flex items-center justify-center bg-gray-100 px-4">
    <div class="w-full max-w-md p-8 bg-white shadow-lg rounded-2xl">
        <h2 class="text-2xl font-bold text-center text-gray-800 mb-6">Reset Password</h2>

        @if (!string.IsNullOrEmpty(token))
        {
            if (!tokenValid)
            {
                <div class="text-center">
                    <p class="text-gray-600">Verifying token...</p>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-red-600 mt-2">@errorMessage</p>
                    }
                </div>
            }
            else if (isSuccess)
            {
                <div class="text-center text-green-600">
                    <p>Password reset successfully!</p>
                    <a href="/login" class="text-blue-600 underline mt-2 inline-block">Login here</a>
                </div>
            }
            else
            {
                <EditForm Model="@resetModel" OnValidSubmit="OnResetSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-600 mb-4" />

                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                        <InputText @bind-Value="resetModel.NewPassword" type="password"
                                   class="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-green-300" />
                        <ValidationMessage For="@(() => resetModel.NewPassword)" class="text-red-500 text-sm" />
                    </div>

                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
                        <InputText @bind-Value="resetModel.ConfirmPassword" type="password"
                                   class="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-green-300" />
                        <ValidationMessage For="@(() => resetModel.ConfirmPassword)" class="text-red-500 text-sm" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-red-600 text-sm mb-4">@errorMessage</p>
                    }

                    <button type="submit"
                            class="w-full py-3 bg-green-500 hover:bg-green-600 text-white font-semibold rounded transition duration-200">
                        Reset Password
                    </button>
                </EditForm>
            }
        }
        else
        {
            if (emailSent)
            {
                <p class="text-green-600 text-center">
                    If the email is registered, a reset link has been sent. Please check your inbox.
                </p>
            }
            else
            {
                <EditForm Model="@emailModel" OnValidSubmit="OnEmailSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-600 mb-4" />

                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                        <InputText @bind-Value="emailModel" type="email"
                                   class="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-green-300" />
                        <ValidationMessage For="@(() => emailModel)" class="text-red-500 text-sm" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-red-600 text-sm mb-4">@errorMessage</p>
                    }

                    <button type="submit"
                            class="w-full py-3 bg-green-500 hover:bg-green-600 text-white font-semibold rounded transition duration-200">
                        Send Reset Link
                    </button>
                </EditForm>
            }
        }
    </div>
</div>


@code {
    private string? token;
    private bool tokenValid;
    private bool isSuccess;
    private bool emailSent;
    private string? errorMessage;

    private ResetPasswordFormModel resetModel = new();
    private string emailModel = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        token = query["token"];

        if (!string.IsNullOrEmpty(token))
        {
            UserResponse response = await UserService.VerifyResetPasswordTokenAsync(token);
            tokenValid = response.StatusCode >= 200 && response.StatusCode < 300;
            if (!tokenValid)
            {
                errorMessage = response.Message;
            }
        }
    }

    private async Task OnEmailSubmit()
    {
        errorMessage = null;
        emailSent = false;

        UserResponse response = await UserService.CreateResetPasswordAsync(emailModel);

        if (response.StatusCode >= 200 && response.StatusCode < 300)
        {
            emailSent = true;
        }
        else
        {
            errorMessage = response.Message;
        }
    }

    private async Task OnResetSubmit()
    {
        errorMessage = null;

        if (resetModel.NewPassword != resetModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        if (string.IsNullOrEmpty(token))
        {
            errorMessage = "Missing reset token.";
            return;
        }

        var response = await UserService.ResetPasswordAsync(token, resetModel.NewPassword);

        if (response.StatusCode >= 200 && response.StatusCode < 300)
        {
            isSuccess = true;
        }
        else
        {
            errorMessage = response.Message;
        }
    }
}
