@page "/report/{ReportId:int}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using System.Globalization

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ReportService ReportService
@inject ReportReplyService ReportReplyService
@inject UserService UserService

<div class="p-6 max-w-7xl mx-auto">
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-semibold text-gray-800">Dettagli Segnalazione</h2>
        <button class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-full" @onclick="ExportToPdf" disabled="@(Report == null)">
            <i class="fa-solid fa-file-pdf mr-2"></i> Esporta in PDF
        </button>
    </div>

    @if (IsLoading)
    {
        <p>Caricamento in corso...</p>
    }
    else if (Report == null)
    {
        <p class="text-red-600">Segnalazione non trovata o errore durante il caricamento.</p>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="col-span-1 md:col-span-1 space-y-6">
                <div class="bg-white rounded-lg shadow p-4 space-y-3">
                    <div>
                        <strong class="text-gray-600">Tipo:</strong> @(Report.Category?.Name ?? "N/D")
                    </div>
                    <div>
                        <strong class="text-gray-600">Luogo:</strong> @Report.Location
                        <div class="text-sm text-gray-500">@Report.LocationDetail</div>
                    </div>
                    <div>
                        <strong class="text-gray-600">Segnalato da:</strong> @(Report.User?.Email ?? "N/D")
                    </div>
                    <div>
                        <strong class="text-gray-600">Data:</strong> @Report.CreatedAt.ToString("d MMM yyyy", CultureInfo.GetCultureInfo("it-IT"))
                    </div>
                    <div>
                        <strong class="text-gray-600">Stato:</strong>
                        <span class="font-semibold status-@Report.Status">@Report.Status</span>
                    </div>
                </div>

                @if (CurrentUser?.Role == UserRoleEnum.Admin)
                {
                    <div class="bg-white p-4 rounded-lg shadow space-y-3">
                        <h3 class="text-lg font-medium text-gray-800">Aggiungi una risposta</h3>

                        <textarea class="w-full border border-gray-300 rounded-md p-2 text-sm"
                                  rows="4" @bind="NewMessage" placeholder="Scrivi un commento..."></textarea>

                        <div class="flex items-center gap-3">
                            <select class="border border-gray-300 rounded-md px-2 py-1 text-sm" @bind="SelectedStatus">
                                <option value="">Aggiorna stato (opzionale)</option>
                                @foreach (var status in Enum.GetValues<ReportStatusEnum>())
                                {
                                    <option value="@status">@status</option>
                                }
                            </select>

                            <button class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-full text-sm"
                                    @onclick="SubmitReply"
                                    disabled="@(string.IsNullOrWhiteSpace(NewMessage))">
                                Invia risposta
                            </button>
                        </div>
                    </div>
                }
            </div>

            <div class="col-span-1 md:col-span-2">
                <div class="bg-white rounded-lg shadow p-4 h-full max-h-[600px] overflow-y-auto">
                    <h3 class="text-xl font-medium text-gray-800 mb-4">Timeline aggiornamenti</h3>

                    @if (Timeline == null || Timeline.Count == 0)
                    {
                        <p class="text-gray-500">Nessun aggiornamento disponibile.</p>
                    }
                    else
                    {
                        <ul class="space-y-4">
                            @foreach (var reply in Timeline.OrderByDescending(t => t.SentAt))
                            {
                                <li class="bg-gray-50 border-l-4 border-green-500 p-3 rounded">
                                    <div class="text-sm">
                                        <strong>@(reply?.User?.Role == UserRoleEnum.User ? "Citizen" : "City Council"):</strong> @reply?.Message
                                    </div>
                                    <div class="text-xs text-gray-500">
                                        @reply?.SentAt.ToLocalTime().ToString("g", CultureInfo.GetCultureInfo("it-IT"))
                                        @if (reply?.NewStatus != null)
                                        {
                                            <span class="ml-2 italic">→ Stato aggiornato: <span class="status-@reply.NewStatus">@reply.NewStatus</span></span>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int ReportId { get; set; }

    private ReportDto? Report;
    private List<ReportReply> Timeline = new();
    private User? CurrentUser = null;
    private string NewMessage = "";
    private ReportStatusEnum? SelectedStatus;
    private bool IsLoading = true;

    private ReportsReplyPaginatedRequest reportsReplyPaginatedRequest = new()
    {
        Page = 1,
        PageSize = 30,
        ReportId = 0
    };

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var userResponse = await UserService.GetMeAsync();
            if (userResponse.StatusCode >= 200 && userResponse.StatusCode < 300)
            {
                CurrentUser = userResponse.User;
            }
            else
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Report = await LoadReportAsync(ReportId);

            if (Report != null)
            {
                reportsReplyPaginatedRequest.ReportId = ReportId;
                Timeline = await LoadTimelineAsync();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Errore imprevisto: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task ExportToPdf()
    {
        if (Report == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Nessun report caricato.");
            return;
        }

        await JSRuntime.InvokeVoidAsync("alert", "Export in PDF triggered.");
    }

    private async Task SubmitReply()
    {
        if (string.IsNullOrWhiteSpace(NewMessage) || CurrentUser == null || Report == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Dati mancanti per l'invio della risposta.");
            return;
        }

        try
        {
            var formData = new MultipartFormDataContent
            {
                { new StringContent(ReportId.ToString()), "ReportId" },
                { new StringContent(CurrentUser.Id.ToString()), "UserId" },
                { new StringContent(NewMessage), "Message" }
            };

            if (SelectedStatus != null)
            {
                formData.Add(new StringContent(SelectedStatus.ToString()!), "NewStatus");
            }

            var result = await ReportReplyService.CreateAsync(formData);

            if (result.StatusCode >= 200 && result.StatusCode < 300)
            {
                NewMessage = "";
                SelectedStatus = null;

                Timeline = await LoadTimelineAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Errore durante l'invio della risposta.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Errore imprevisto durante l'invio: " + ex.Message);
        }
    }

    private async Task<ReportDto?> LoadReportAsync(int id)
    {
        try
        {
            var result = await ReportService.GetByIdAsync(id);

            if (result.StatusCode >= 200 && result.StatusCode < 300)
            {
                return result.Report;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Errore durante il caricamento della segnalazione.");
                return null;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Errore imprevisto nel caricamento: " + ex.Message);
            return null;
        }
    }

    private async Task<List<ReportReply>> LoadTimelineAsync()
    {
        try
        {
            var result = await ReportReplyService.GetAllAsync(reportsReplyPaginatedRequest);

            if (result.StatusCode >= 200 && result.StatusCode < 300)
            {
                return result.Items ?? new List<ReportReply>();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Errore durante il caricamento della timeline.");
                return new List<ReportReply>();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Errore imprevisto nel caricamento della timeline: " + ex.Message);
            return new List<ReportReply>();
        }
    }
}
