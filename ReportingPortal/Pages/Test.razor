@page "/test"
@using System.ComponentModel.DataAnnotations
@inject IConfiguration Configuration
@inject NotificationService notificationService

<div class="max-w-md mx-auto mt-12 p-8 bg-white rounded-lg shadow-lg">
    <h1 class="text-2xl font-bold mb-6 text-center text-gray-800">Subscribe to Push Notifications</h1>
    <div id="GiveAccess" style="display:none;" class="mb-4 p-4 bg-blue-50 border border-blue-200 rounded flex items-center justify-between">
        <span class="text-blue-700">Give access to making notifications:</span>
        <button id="PromptForAccessBtn" class="ml-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">Prompt</button>
    </div>
    <div id="NoSupport" style="display:none;" class="mb-4 p-4 bg-red-50 border border-red-200 rounded text-red-700 text-center">
        Your browser does not support Push Notifications or you have blocked notifications
    </div>

    <EditForm Model="@subscribeModel" OnValidSubmit="HandleValidSubmit" id="form" style="display:none;" class="space-y-4">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="client" class="block text-gray-700 font-medium mb-1">Your name:</label>
            <InputText id="client" @bind-Value="subscribeModel.Client" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
        </div>
        <input hidden id="endpoint" @bind-value="subscribeModel.Endpoint" />
        <input hidden id="p256dh" @bind-value="subscribeModel.P256dh" />
        <input hidden id="auth" @bind-value="subscribeModel.Auth" />
        <button type="submit" class="w-full py-2 bg-green-600 text-white rounded hover:bg-green-700 transition font-semibold">Subscribe</button>
    </EditForm>
</div>

<script>
    var applicationServerKey = "BFQRVbu5IEbEnEGvD9vlj2ZUNzjsqYA6gvXHoG-Q0LHSH6Z0U_XJfxvotAHZ1Yr_SfRUYMAaPbl5JXa2bppv6wA";

    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register("/ServiceWorker.js", { scope: "/" })
            .then(reg => {
                if (Notification.permission === "granted") {
                    $("#form").show();
                    getSubscription(reg);
                } else if (Notification.permission === "blocked") {
                    $("#NoSupport").show();
                } else {
                    $("#GiveAccess").show();
                    $("#PromptForAccessBtn").click(() => requestNotificationAccess(reg));
                }
            })
            .catch(err => {
                console.error("Service Worker registration failed:", err);
            });
    } else {
        $("#NoSupport").show();
    }

    function requestNotificationAccess(reg) {
        Notification.requestPermission(function (status) {
            $("#GiveAccess").hide();
            if (status == "granted") {
                $("#form").show();
                getSubscription(reg);
            } else {
                $("#NoSupport").show();
            }
        });
    }

    function getSubscription(reg) {
        reg.pushManager.getSubscription().then(function (sub) {
            if (sub === null) {
                reg.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: applicationServerKey
                }).then(function (sub) {
                    fillSubscribeFields(sub);
                }).catch(function (e) {
                    console.error("Unable to subscribe to push", e);
                });
            } else {
                fillSubscribeFields(sub);
            }
        });
    }

    function fillSubscribeFields(sub) {
        DotNet.invokeMethodAsync("ReportingPortal", "SetSubscriptionFields", sub.endpoint, 
            arrayBufferToBase64(sub.getKey('p256dh')), 
            arrayBufferToBase64(sub.getKey('auth')))
            .then(() => {
                $("#form").show();
                console.log("Subscription fields set successfully.");
            })
            .catch(err => {
                console.error("Error setting subscription fields:", err);
            });
    }

    function arrayBufferToBase64(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
</script>

@code {
    private SubscribeModel subscribeModel = new();
    private static Test? _instance;

    private string? applicationServerKey;

    protected override void OnInitialized()
    {
        applicationServerKey = Configuration?["VAPID:publicKey"];
        _instance = this;
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Form submitted successfully.");
        if (string.IsNullOrEmpty(subscribeModel.Client) || 
            string.IsNullOrEmpty(subscribeModel.Endpoint) || 
            string.IsNullOrEmpty(subscribeModel.P256dh) || 
            string.IsNullOrEmpty(subscribeModel.Auth))
        {
            Console.WriteLine("All fields are required.");
            return;
        }

        Console.WriteLine($"Subscribed: {subscribeModel.Client}, {subscribeModel.Endpoint}, {subscribeModel.P256dh}, {subscribeModel.Auth}");

        await notificationService.SubscribeToPushNotificationsAsync(subscribeModel.Client, subscribeModel.Endpoint, subscribeModel.P256dh, subscribeModel.Auth);
    }

    public class SubscribeModel
    {
        [Required]
        public string? Client { get; set; }
        public string? Endpoint { get; set; }
        public string? P256dh { get; set; }
        public string? Auth { get; set; }
    }

    [JSInvokable]
    public static Task SetSubscriptionFields(string endpoint, string p256dh, string auth)
    {
         if (_instance is null)
        throw new InvalidOperationException("Component instance is not set.");

    _instance.subscribeModel.Endpoint = endpoint;
    _instance.subscribeModel.P256dh = p256dh;
    _instance.subscribeModel.Auth = auth;

    _instance.StateHasChanged();

    return Task.CompletedTask;
    }
}