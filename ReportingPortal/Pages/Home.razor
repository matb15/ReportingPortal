@page "/home"

@using LeafletForBlazor

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<style>
    .text-link {
        color: #22c55e;
        font-size: 0.875rem;
        font-weight: 500;
        text-decoration: none;
    }

    .map-link {
        background-color: #22c55e;
        font-size: 0.875rem;
        font-weight: 500;
        text-decoration: none;
        color: white;
        position: absolute;
        bottom: 1.5rem;
        right: 1rem;
        padding: 0.5rem 0.75rem;
        border-radius: 0.5rem;
        z-index: 5000;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid white;
    }

    .text-link:hover {
        text-decoration: underline;
    }
</style>

<div class="px-4 space-y-4 bg-gray-50">
    @if (showAddReportForm)
    {
        <AddReportForm OnCancel="HideAddReportForm" OnSubmit="HandleAddReportSubmit" />
    }
    else
    {
        <div class="flex items-center justify-between p-4 relative">
            <h1 class="text-2xl font-semibold text-gray-800 mx-auto">Home</h1>

            <button class="bg-[#66c61c] hover:bg-green-600 text-white px-4 py-2 rounded-full" @onclick="ShowAddReportForm">
                Add Report
            </button>
        </div>

        <div class="w-full relative">
            <RealTimeMap Parameters="parameters" Options="options" @ref="realTimeMap" height="450px" width="100%">
            </RealTimeMap>

            <NavLink href="/map" class="map-link">
                <i class="fa-solid fa-arrow-right"></i>
            </NavLink>
        </div>

        <div class="bg-white rounded-lg shadow p-4">
            <h2 class="text-lg font-medium text-gray-800 mb-2">Latest Reports</h2>
            @if (reports.Count > 0)
            {
                <table class="w-full text-sm text-gray-700">
                    @foreach (var report in reports.Take(5))
                    {
                        <tr class="border-b">
                            <td class="py-4 align-top">
                                <div class="text-sm text-gray-800 space-y-1">
                                    <div class="grid grid-cols-2">
                                        <div>
                                            <span class="font-semibold text-gray-900">Type:</span>
                                            <span class="ml-1 text-gray-600">Infrastructure</span>
                                        </div>
                                        <div class="text-right">
                                            <span class="font-semibold text-gray-900">Date:</span>
                                            <span class="ml-1 text-gray-600">2025-05-17</span>
                                        </div>
                                    </div>
                                    <div class="grid grid-cols-2">
                                        <div>
                                            <span class="font-semibold text-gray-900">Location:</span>
                                            <span class="ml-1 text-gray-600">Milan, Italy</span>
                                        </div>
                                        <div class="text-right">
                                            <span class="font-semibold text-gray-900">Status:</span>
                                            <span
                                                class="ml-1 inline-block px-2 py-0.5 text-xs font-semibold rounded-full bg-green-100 text-green-700">
                                                Resolved
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td class="py-4 text-center align-middle pl-3">
                                <button class="text-[#66c61c] hover:text-green-700 transition-colors duration-150 cursor-pointer"
                                    @onclick="@(_ => GoToReportDetail(report.Id))">
                                    <i class="fa-solid fa-right-to-bracket text-lg"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </table>
                <p class="text-xs text-gray-500 mt-2">
                    Showing @Math.Min(5, reports.Count) of @reports.Count
                </p>
                <div class="text-right mt-3">
                    <NavLink href="/reports" class="text-link">View all</NavLink>
                </div>
            }
            else
            {
                <p class="text-gray-500 text-sm text-center py-8">No reports available</p>
            }
        </div>
    }
</div>

@code {
    RealTimeMap realTimeMap = new RealTimeMap();

    private bool showAddReportForm = false;

    private void ShowAddReportForm() => showAddReportForm = true;
    private void HideAddReportForm() => showAddReportForm = false;

    RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters()
    {
        location = new RealTimeMap.Location()
        {
            latitude = 45.6982642,
            longitude = 9.6772698,
        },
        zoomLevel = 18
    };

    RealTimeMap.MapOptions options = new RealTimeMap.MapOptions()
    {
        interactionOptions = new RealTimeMap.InteractionOptions()
        {
            doubleClickZoom = true,
            shiftBoxZoom = false,
        },
    };

    private List<Report> reports = new List<Report>();
    private List<User> users = new List<User>();
    private bool showDemo = true;

    private void GoToReportDetail(int reportId) => Navigation.NavigateTo($"/report/{reportId}");

    private void HandleAddReportSubmit(ReportFormModel report)
    {
        reports.Add(new Report
        {
            CategoryId = report.Type,
            Location = report.Location,
            Description = report.Description,
            Status = ReportStatusEnum.Pending
        });

        showAddReportForm = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (showDemo)
            {
                AddDemoReports();
                AddDemoUsers();
                StateHasChanged();
            }
        }
    }

    private void AddDemoReports()
    {
        for (int i = 0; i < 7; i++)
        {
            reports.Add(new Report { });
        }
    }

    private void AddDemoUsers()
    {
        for (int i = 0; i < 5; i++)
        {
            users.Add(new User { });
        }
    }

    private void AddReport()
    {
        reports.Add(new Report { });
        StateHasChanged();
    }
}
