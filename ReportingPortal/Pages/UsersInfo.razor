@page "/users"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@inject UserService UserService

<div class="p-6">
    <Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />
    <Alert AlertData="@AlertData2" OnDismissed="@(() => AlertData2.IsVisible = false)" />

    <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-semibold text-gray-900">All Users</h2>
        <div class="flex gap-2 items-center">
            <div class="flex gap-2 items-center">
                <InputSearch SearchText="@Search" SearchTextChanged="OnSearchTextChanged" />

                <select class="border border-gray-300 rounded-md px-3 py-2 text-sm bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c]" @onchange="OnRoleFilterChanged">
                    <option value="">All Roles</option>
                    @foreach (UserRoleEnum role in Enum.GetValues<UserRoleEnum>())
                    {
                        <option value="@role.ToString()" selected="@(role == RoleFilter)">
                            @role
                        </option>
                    }
                </select>

                <select class="border border-gray-300 rounded-md px-3 py-2 text-sm bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c]" @onchange="OnEmailConfirmedFilterChanged">
                    <option value="">All</option>
                    <option value="true" selected="@(EmailConfirmedFilter == true)">Confirmed</option>
                    <option value="false" selected="@(EmailConfirmedFilter == false)">Unconfirmed</option>
                </select>

                <select class="border border-gray-300 rounded-md px-3 py-2 text-sm bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c]" @onchange="OnSortChanged">
                    <option value="NameAsc">Name ↑</option>
                    <option value="NameDesc">Name ↓</option>
                    <option value="SurnameAsc">Surname ↑</option>
                    <option value="SurnameDesc">Surname ↓</option>
                    <option value="EmailAsc">Email ↑</option>
                    <option value="EmailDesc">Email ↓</option>
                </select>
            </div>
        </div>
    </div>

    <div class="overflow-x-auto">
        <table class="min-w-full bg-white shadow rounded-lg overflow-hidden text-sm">
            <thead class="bg-gray-100 text-gray-600">
                <tr>
                    <th class="text-left px-4 py-3 font-semibold">Name</th>
                    <th class="text-left px-4 py-3 font-semibold">Surname</th>
                    <th class="text-left px-4 py-3 font-semibold">Email</th>
                    <th class="text-center px-4 py-3 font-semibold">Email Confirmed</th>
                    <th class="text-left px-4 py-3 font-semibold">Role</th>
                    <th class="text-center px-4 py-3 font-semibold">Reports Created</th>
                    <th class="text-center px-4 py-3 font-semibold">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in PagedUsers)
                {
                    <tr class="border-b hover:bg-gray-50 transition">
                        <td class="px-4 py-3 font-medium text-gray-800">@user.Name</td>
                        <td class="px-4 py-3 font-medium text-gray-800">@user.Surname</td>
                        <td class="px-4 py-3 text-gray-700">@user.Email</td>
                        <td class="text-center px-4 py-3">
                            @if (user.EmailConfirmed)
                            {
                                <span class="px-2 py-1 rounded-full text-xs font-semibold text-white bg-green-500">Confirmed</span>
                            }
                            else
                            {
                                <span class="px-2 py-1 rounded-full text-xs font-semibold text-white bg-red-500">Unconfirmed</span>
                            }
                        </td>
                        <td class="px-4 py-3">
                            <span class="px-2 py-1 rounded-full text-xs font-semibold text-white bg-@user.Role">
                                @user.Role
                            </span>
                        </td>
                        <td class="text-center px-4 py-3 text-green-600 font-semibold">0</td>
                        <td class="text-center px-4 py-3">
                            <button class="p-2 text-red-600 hover:text-red-800" @onclick="() => ConfirmDeleteUser(user.Id)" title="Delete User">
                                <i class="fa-solid fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="flex justify-between items-center text-sm text-gray-600 mt-4 px-2">
        <button @onclick="PreviousPage" class="p-2 hover:text-[#66c61c]" disabled="@IsFirstPage">
            <i class="fa-solid fa-chevron-left"></i>
        </button>

        <span>
            @StartIndex–@EndIndex of @TotalCount
        </span>

        <button @onclick="NextPage" class="p-2 hover:text-[#66c61c]" disabled="@IsLastPage">
            <i class="fa-solid fa-chevron-right"></i>
        </button>
    </div>

    @if (users.Count == 0)
    {
        <div class="text-center text-gray-500 py-6">No users available</div>
    }
</div>

@code {

    private List<User> users = new();
    private string Search { get; set; } = string.Empty;
    private UserRoleEnum? RoleFilter { get; set; } = null;
    private bool? EmailConfirmedFilter { get; set; } = null;
    private string SortField { get; set; } = "Name";
    private bool SortAscending { get; set; } = true;

    private int Page { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private int TotalCount { get; set; }

    private int StartIndex => users.Count == 0 ? 0 : ((Page - 1) * PageSize) + 1;
    private int EndIndex => Math.Min(Page * PageSize, TotalCount);

    private bool IsFirstPage => Page == 1;
    private bool IsLastPage => Page * PageSize >= TotalCount;

    private IEnumerable<User> PagedUsers => users;

    private List<UserRoleEnum> Roles => Enum.GetValues(typeof(UserRoleEnum)).Cast<UserRoleEnum>().ToList();

    private AlertModel AlertData = new();
    private AlertModel AlertData2 = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchUsersAsync();
    }

    private async Task FetchUsersAsync()
    {
        UsersPaginatedRequest request = new()
        {
            Page = Page,
            PageSize = PageSize,
            Search = Search,
            Role = RoleFilter,
            EmailConfirmed = EmailConfirmedFilter,
            SortAscending = SortAscending,
            SortField = SortField
        };

        UsersPaginatedResponse response = await UserService.GetAllAsync(request);

        users = response.Items ?? new List<User>();
        TotalCount = response.TotalCount;
        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        if (Page > 1)
        {
            Page--;
            await FetchUsersAsync();
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            Page++;
            await FetchUsersAsync();
        }
    }

    private async Task OnSearchTextChanged(string value)
    {
        Search = value;
        Page = 1;
        await FetchUsersAsync();
    }

    private async Task OnRoleFilterChanged(ChangeEventArgs e)  
    {  
        string selectedValue = e.Value?.ToString() ?? ""; 
        if (Enum.TryParse<UserRoleEnum>(selectedValue, out UserRoleEnum parsedRole))  
        {  
            RoleFilter = parsedRole;  
        }  
        else  
        {  
            RoleFilter = null;
        }  

        Page = 1;  
        await FetchUsersAsync();  
    }

    private async Task OnEmailConfirmedFilterChanged(ChangeEventArgs e)
    {
        string? selected = e.Value?.ToString();
        EmailConfirmedFilter = selected switch
        {
            "true" => true,
            "false" => false,
            _ => null
        };
        Page = 1;
        await FetchUsersAsync();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        string? selected = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(selected))
        {
            SortField = selected.Replace("Asc", "").Replace("Desc", "");
            SortAscending = selected.EndsWith("Asc");
            Page = 1;
            await FetchUsersAsync();
        }
    }

    private void ConfirmDeleteUser(int userId)
    {
        AlertData = new AlertModel
        {
            IsVisible = true,
            Style = AlertTypeEnum.Warning,
            Message = "Are you sure you want to delete this user?",
            Title = "Delete User",
            Position = AlertStylePositionEnum.Center,
            HasActions = true,
            OkText = "Delete",
            CancelText = "Cancel",
            OnOk = EventCallback.Factory.Create(this, () => DeleteUser(userId)),
            OnCancel = EventCallback.Factory.Create(this, () => AlertData.IsVisible = false)
        };
    }

    private async Task DeleteUser(int userId)
    {
        if (AlertData.OkText == "Delete" && AlertData.IsVisible)
        {
            Response response = await UserService.DeleteAsync(userId);

            if (response.StatusCode <= 200 && response.StatusCode >= 299)
            {
                AlertData2 = new AlertModel
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Danger,
                    Message = response.Message ?? "Failed to delete user.",
                    Title = "Error",
                    Position = AlertStylePositionEnum.BottomRight
                };
                return;
            }

            AlertData2 = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Information,
                Message = "User deleted successfully.",
                Title = "Success",
                Position = AlertStylePositionEnum.BottomRight
            };

            await FetchUsersAsync();
        }
    }
}
