@page "/home"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Models.front
@using System.Security.Claims
@using System.Text.Json

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject CustomAuthStateProvider AuthProvider
@inject NotificationService notificationService
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<style>
    .text-link {
        color: #22c55e;
        font-size: 0.875rem;
        font-weight: 500;
        text-decoration: none;
    }

    .text-link:hover {
        text-decoration: underline;
    }

    .map-link {
      background-color: #22c55e;
      font-size: 0.875rem;
      font-weight: 500;
      text-decoration: none;
      color: white;
      position: absolute;
      bottom: 1.5rem;
      right: 1rem;
      padding: 0.5rem 0.75rem;
      border-radius: 0.5rem;
      z-index: 5000;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid white;

      transition: transform 0.2s ease-in-out;
    }

    .map-link:hover {
      transform: scale(1.1);
    }

</style>


<div class="p-4 bg-gray-50 space-y-4">
    @if (showAddReportForm)
    {
@*         <AddReportForm OnCancel="HideAddReportForm" OnSubmit="HandleAddReportSubmit" />
 *@    }
    else
    {
        <div class="flex space-x-2 border-b border-gray-200">
            <button @onclick="SelectMapTab"
        class="@($"px-4 py-2 font-medium text-sm border-b-2 { (selectedTab == "map" ? "border-[#66c61c] text-[#66c61c]" : "border-transparent text-gray-500") }")">
    Map
</button>

            <button @onclick="@(() => selectedTab = "reports")"
                    class="@($"px-4 py-2 font-medium text-sm border-b-2 { (selectedTab == "reports" ? "border-[#66c61c] text-[#66c61c]" : "border-transparent text-gray-500") }")">
                Reports
            </button>
        </div>

        @if (selectedTab == "map")
        {
            <div class="relative mt-4 h-[84vh]" id="map">
                <NavLink href="/map"
                         class="map-link">
                    <i class="fa-solid fa-expand"></i>
                </NavLink>
            </div>
        }

        @if (selectedTab == "reports")
        {
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-4">
                @foreach (var report in reports)
                {
                    <div class="bg-white rounded-xl shadow p-4 flex flex-col">
                    <div class="w-full h-48 bg-gray-100 rounded-lg mb-3 overflow-hidden flex items-center justify-center">
                        <img src="https://placehold.co/600x400"
                             alt="Report image"
                             class="w-full h-full object-cover" />
                    </div>

                    <div class="flex-1 text-sm text-gray-700">
                        <h3 class="text-base font-semibold text-gray-800 mb-2 line-clamp-1">@report.Title ?? "Untitled Report"</h3>

                        <div class="grid grid-cols-2 gap-x-4 gap-y-1 text-sm">
                            <div>
                                <span class="font-semibold text-gray-800">Location:</span>
                                <span class="ml-1 text-gray-600">@report.Location ?? "Unknown"</span>
                            </div>
                            <div>
                                <span class="font-semibold text-gray-800">Category:</span>
                                <span class="ml-1 text-gray-600">@report.Category?.Name ?? "N/A"</span>
                            </div>

                            <div>
                                <span class="font-semibold text-gray-800">Date:</span>
                                <span class="ml-1 text-gray-600">@report.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd")</span>
                            </div>
                            <div>
                                <span class="font-semibold text-gray-800">Status:</span>
                                <span class="ml-1 inline-block px-2 py-0.5 text-xs font-semibold rounded-full
                                    @(report.Status switch {
                                        ReportStatusEnum.Resolved => "bg-green-100 text-green-700",
                                        ReportStatusEnum.Pending => "bg-yellow-100 text-yellow-700",
                                        _ => "bg-gray-100 text-gray-700"
                                    })">
                                    @report.Status
                                </span>
                            </div>
                        </div>
                    </div>
                    <button @onclick="@(() => GoToReportDetail(report.Id))"
                            class="mt-4 w-full bg-[#66c61c] hover:bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium flex items-center justify-center gap-2">
                        <i class="fa-solid fa-right-to-bracket"></i> View Detail
                    </button>
                </div>
                }
            </div>
        }   
    }
</div>


@code {
    private static Home? _instance;
    private string selectedTab = "map";

    private bool showAddReportForm = false;
    private List<Report> reports = new();
    private List<User> users = new();
    private bool showDemo = true;

    private void ShowAddReportForm() => showAddReportForm = true;
    private void HideAddReportForm() => showAddReportForm = false;

    private void GoToReportDetail(int reportId) => Navigation.NavigateTo($"/report/{reportId}");

    private void HandleAddReportSubmit(ReportFormModel report)
    {
        reports.Add(new Report
        {
            CategoryId = report.Type,
            Location = report.Location,
            Description = report.Description,
            Status = ReportStatusEnum.Pending
        });

        showAddReportForm = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("MAP.initMap");

            _instance = this;

            string? userJson = await localStorage.GetItemAsync<string>("user");
            if (!string.IsNullOrEmpty(userJson))
            {
                var user = JsonSerializer.Deserialize<User>(userJson);
                if (user != null && !string.IsNullOrEmpty(user.Email))
                {
                    await JSRuntime.InvokeVoidAsync("registerPushNotifications", user.Email);
                }
            }

            if (showDemo)
            {
                AddDemoReports();
                StateHasChanged();
            }
        }
    }

    [JSInvokable]
    public static async Task AutoSubscribe(string clientEmail, string endpoint, string p256dh, string auth)
    {
        if (_instance is null)
            throw new InvalidOperationException("Component instance is not initialized.");

        await _instance.notificationService.SubscribeToPushNotificationsAsync(clientEmail, endpoint, p256dh, auth);
    }

    private void AddDemoReports()
    {
        for (int i = 0; i < 37; i++)
        {
            reports.Add(new Report { });
        }
    }

    private async Task SelectMapTab()
    {
        selectedTab = "map";
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("MAP.initMap");
    }
}
