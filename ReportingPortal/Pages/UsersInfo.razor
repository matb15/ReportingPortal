@page "/dashboard/users"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@inject UserService UserService

<div class="mx-auto px-4 sm:px-8 py-8 bg-white rounded-xl mt-8">
    <Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />
    <Alert AlertData="@AlertData2" OnDismissed="@(() => AlertData2.IsVisible = false)" />

    <div class="flex flex-col md:flex-row md:justify-between md:items-center mb-8 gap-4">
        <div class="flex items-center gap-3">
            <NavLink href="/dashboard" class="flex items-center px-4 py-2 rounded-lg text-gray-600 hover:bg-gray-200 transition text-base font-medium shadow-sm border border-gray-200" activeClass="">
                <i class="fa-solid fa-arrow-left mr-2"></i> Back
            </NavLink>
            <h2 class="text-3xl font-bold text-gray-900 ml-4">All Users</h2>
        </div>
    </div>

    <div class="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-4 mb-6">
        <div class="flex flex-col sm:flex-row sm:gap-4 w-full sm:w-2/3">
            <div class="flex flex-col w-full sm:w-1/2">
                <label class="text-sm text-gray-600 mb-1">Search by name or email</label>
                <InputSearch SearchText="@Search" SearchTextChanged="OnSearchTextChanged" />
            </div>
        </div>

        <div class="flex flex-row flex-wrap gap-3 w-full sm:w-auto">
            <div class="flex flex-col w-40 min-w-[10rem]">
                <label class="text-sm text-gray-600 mb-1">Filter by role</label>
                <select class="border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c] shadow-sm text-sm" @onchange="OnRoleFilterChanged">
                    <option value="">All Roles</option>
                    @foreach (UserRoleEnum role in Enum.GetValues<UserRoleEnum>())
                    {
                        <option value="@role.ToString()" selected="@(role == RoleFilter)">
                            @role
                        </option>
                    }
                </select>
            </div>
            <div class="flex flex-col w-40 min-w-[10rem]">
                <label class="text-sm text-gray-600 mb-1">Email confirmation</label>
                <select class="border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c] shadow-sm text-sm" @onchange="OnEmailConfirmedFilterChanged">
                    <option value="">All</option>
                    <option value="true" selected="@(EmailConfirmedFilter == true)">Confirmed</option>
                    <option value="false" selected="@(EmailConfirmedFilter == false)">Unconfirmed</option>
                </select>
            </div>
            <div class="flex flex-col w-40 min-w-[10rem]">
                <label class="text-sm text-gray-600 mb-1">Sort users</label>
                <select class="border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-[#66c61c] shadow-sm text-sm" @onchange="OnSortChanged">
                    <option value="NameAsc">Name ↑</option>
                    <option value="NameDesc">Name ↓</option>
                    <option value="SurnameAsc">Surname ↑</option>
                    <option value="SurnameDesc">Surname ↓</option>
                    <option value="EmailAsc">Email ↑</option>
                    <option value="EmailDesc">Email ↓</option>
                </select>
            </div>
        </div>
    </div>



    <div class="w-full overflow-x-auto rounded-lg border border-gray-200 shadow-sm">
        <table class="w-full bg-white text-sm md:text-base table-auto">
            <thead class="bg-gray-50 text-gray-700">
                <tr>
                    <th class="text-left px-6 py-4 font-semibold">Name</th>
                    <th class="text-left px-6 py-4 font-semibold">Surname</th>
                    <th class="text-left px-6 py-4 font-semibold">Email</th>
                    <th class="text-center px-6 py-4 font-semibold">Email Confirmed</th>
                    <th class="text-left px-6 py-4 font-semibold">Role</th>
                    <th class="text-center px-6 py-4 font-semibold">Reports Created</th>
                    <th class="text-center px-6 py-4 font-semibold">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in PagedUsers)
                {
                    <tr class="border-b last:border-b-0 hover:bg-gray-100 transition">
                        <td class="px-6 py-4 font-medium text-gray-900 truncate">@user.Name</td>
                        <td class="px-6 py-4 font-medium text-gray-900 truncate">@user.Surname</td>
                        <td class="px-6 py-4 text-gray-700 truncate">@user.Email</td>
                        <td class="text-center px-6 py-4">
                            @if (user.EmailConfirmed)
                            {
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold text-white bg-green-500 shadow-sm">Confirmed</span>
                            }
                            else
                            {
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500 shadow-sm">Unconfirmed</span>
                            }
                        </td>
                        <td class="px-6 py-4 truncate">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold text-white bg-gradient-to-r from-[#66c61c] to-green-500 shadow-sm">
                                @user.Role
                            </span>
                        </td>
                        <td class="text-center px-6 py-4 text-green-600 font-semibold">0</td>
                        <td class="text-center px-6 py-4">
                            <button class="w-10 h-10 flex items-center justify-center rounded-full bg-red-50 hover:bg-red-100 text-red-600 hover:text-red-800 transition"
                                    @onclick="() => ConfirmDeleteUser(user.Id)" title="Delete User">
                                <i class="fa-solid fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="flex flex-col md:flex-row justify-between items-center text-base text-gray-600 mt-6 px-2 gap-3">
        <button @onclick="PreviousPage"
                class="w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-[#66c61c] hover:text-white transition disabled:opacity-50"
                disabled="@IsFirstPage">
            <i class="fa-solid fa-chevron-left"></i>
        </button>


        <span>
            <span class="font-semibold">@StartIndex–@EndIndex</span> of <span class="font-semibold">@TotalCount</span>
        </span>
        <button @onclick="PreviousPage"
                class="w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-[#66c61c] hover:text-white transition disabled:opacity-50"
                disabled="@IsFirstPage">
            <i class="fa-solid fa-chevron-right"></i>
        </button>
    </div>

    @if (users.Count == 0)
    {
        <div class="text-center text-gray-400 py-10 text-lg">No users available</div>
    }
</div>

@code {
    private List<User> users = new();
    private string Search { get; set; } = string.Empty;
    private UserRoleEnum? RoleFilter { get; set; } = null;
    private bool? EmailConfirmedFilter { get; set; } = null;
    private string SortField { get; set; } = "Name";
    private bool SortAscending { get; set; } = true;

    private int Page { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private int TotalCount { get; set; }

    private int StartIndex => users.Count == 0 ? 0 : ((Page - 1) * PageSize) + 1;
    private int EndIndex => Math.Min(Page * PageSize, TotalCount);

    private bool IsFirstPage => Page == 1;
    private bool IsLastPage => Page * PageSize >= TotalCount;

    private IEnumerable<User> PagedUsers => users;

    private AlertModel AlertData = new();
    private AlertModel AlertData2 = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchUsersAsync();
    }

    private async Task FetchUsersAsync()
    {
        var request = new UsersPaginatedRequest
        {
            Page = Page,
            PageSize = PageSize,
            Search = Search,
            Role = RoleFilter,
            EmailConfirmed = EmailConfirmedFilter,
            SortAscending = SortAscending,
            SortField = SortField
        };

        var response = await UserService.GetAllAsync(request);
        users = response.Items ?? new List<User>();
        TotalCount = response.TotalCount;
        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        if (Page > 1)
        {
            Page--;
            await FetchUsersAsync();
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            Page++;
            await FetchUsersAsync();
        }
    }

    private async Task OnSearchTextChanged(string value)
    {
        Search = value;
        Page = 1;
        await FetchUsersAsync();
    }

    private async Task OnRoleFilterChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();
        RoleFilter = Enum.TryParse<UserRoleEnum>(selected, out var parsedRole) ? parsedRole : null;
        Page = 1;
        await FetchUsersAsync();
    }

    private async Task OnEmailConfirmedFilterChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();
        EmailConfirmedFilter = selected switch
        {
            "true" => true,
            "false" => false,
            _ => null
        };
        Page = 1;
        await FetchUsersAsync();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(selected))
        {
            SortField = selected.Replace("Asc", "").Replace("Desc", "");
            SortAscending = selected.EndsWith("Asc");
            Page = 1;
            await FetchUsersAsync();
        }
    }

    private void ConfirmDeleteUser(int userId)
    {
        AlertData = new AlertModel
        {
            IsVisible = true,
            Style = AlertTypeEnum.Warning,
            Message = "Are you sure you want to delete this user?",
            Title = "Delete User",
            Position = AlertStylePositionEnum.Center,
            HasActions = true,
            OkText = "Delete",
            CancelText = "Cancel",
            OnOk = EventCallback.Factory.Create(this, () => DeleteUser(userId)),
            OnCancel = EventCallback.Factory.Create(this, () => AlertData.IsVisible = false)
        };
    }

    private async Task DeleteUser(int userId)
    {
        if (AlertData.OkText == "Delete" && AlertData.IsVisible)
        {
            var response = await UserService.DeleteAsync(userId);

            if (response.StatusCode < 200 || response.StatusCode >= 300)
            {
                AlertData2 = new AlertModel
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Danger,
                    Message = response.Message ?? "Failed to delete user.",
                    Title = "Error",
                    Position = AlertStylePositionEnum.BottomRight
                };
                return;
            }

            AlertData2 = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Information,
                Message = "User deleted successfully.",
                Title = "Success",
                Position = AlertStylePositionEnum.BottomRight
            };

            await FetchUsersAsync();
        }
    }
}
