@page "/dashboard"
@using LeafletForBlazor
@inject IJSRuntime JSRuntime

<style>
    .text-link {
        color: #22c55e; 
        font-size: 0.875rem;
        font-weight: 500;
        text-decoration: none;
    }

    .text-link:hover {
        text-decoration: underline;
     }

</style>

<div class="w-full px-4 space-y-4 bg-gray-50">
    <div class="bg-white p-4 rounded-lg shadow space-y-4 md:space-y-0 md:flex md:items-center md:justify-between flex-wrap gap-4">
        <h1 class="text-2xl font-semibold text-gray-800 w-full md:w-auto">Dashboard</h1>

        <div class="flex flex-wrap gap-4 items-end">
            <div>
                <label class="text-sm font-medium text-gray-600 block">Category</label>
                <select @bind="selectedCategory" class="w-40 mt-1 border-gray-300 rounded-md text-sm focus:ring-[#66c61c] focus:border-[#66c61c]">
                    @foreach (var cat in categories)
                    {
                        <option>@cat</option>
                    }
                </select>
            </div>

            <div>
                <label class="text-sm font-medium text-gray-600 block">District</label>
                <select @bind="selectedDistrict" class="w-40 mt-1 border-gray-300 rounded-md text-sm focus:ring-[#66c61c] focus:border-[#66c61c]">
                    @foreach (var dist in districts)
                    {
                        <option>@dist</option>
                    }
                </select>
            </div>

            <div>
                <label class="text-sm font-medium text-gray-600 block">Status</label>
                <select @bind="selectedStatus" class="w-40 mt-1 border-gray-300 rounded-md text-sm focus:ring-[#66c61c] focus:border-[#66c61c]">
                    @foreach (var stat in statuses)
                    {
                        <option>@stat</option>
                    }
                </select>
            </div>

            <button @onclick="ApplyFilters" class="px-4 py-2 bg-[#66c61c] hover:bg-green-600 text-white rounded-full text-sm mt-2 md:mt-6">
                Apply Filters
            </button>
        </div>

        <div class="flex items-center space-x-2">
            <button class="w-10 h-10 text-[#66c61c] flex items-center justify-center rounded-full bg-gray-200 hover:bg-gray-100">
                <i class="fa-solid fa-magnifying-glass"></i>
            </button>
            <button class="bg-[#66c61c] hover:bg-green-600 text-white px-4 py-2 rounded-full text-sm">
                Add Report
            </button>
        </div>
    </div>

    <div class="w-full">
        <RealTimeMap Parameters="parameters" Options="options" @ref="realTimeMap" height="450px" width="100%"></RealTimeMap>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="bg-white rounded-lg shadow p-4">
            <h2 class="text-lg font-medium text-gray-800 mb-2">Latest Reports</h2>
            @if (reports.Count > 0)
            {
                <table class="w-full text-sm text-gray-700">
                    @foreach (var report in reports.Take(5))
                    {
                        <tr class="border-b">
                            <td class="py-2">@("(Report type)")</td>
                            <td class="py-2 text-right">
                                <button class="text-[#66c61c] hover:underline cursor-pointer">
                                    <i class="fa-solid fa-right-to-bracket"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </table>
                <p class="text-xs text-gray-500 mt-2">
                    Showing @Math.Min(5, reports.Count) of @reports.Count
                </p>
                <div class="text-right mt-3">
                    <NavLink href="/reports" class="text-link">View all</NavLink>
                </div>
            }
            else
            {
                <p class="text-gray-500 text-sm text-center py-8">No reports available</p>
            }
        </div>

        <!-- Latest Users -->
        <div class="bg-white rounded-lg shadow p-4">
            <h2 class="text-lg font-medium text-gray-800 mb-2">Latest Users</h2>
            @if (users.Count > 0)
            {
                <table class="w-full text-sm text-gray-700">
                    @foreach (var user in users.Take(5))
                    {
                        <tr class="border-b">
                            <td class="py-2">@("(User name)")</td>
                            <td class="py-2 text-right">
                                <button class="text-[#66c61c] hover:underline cursor-pointer">
                                    <i class="fa-solid fa-right-to-bracket"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </table>
                <p class="text-xs text-gray-500 mt-2">
                    Showing @Math.Min(5, users.Count) of @users.Count
                </p>
                <div class="text-right mt-3">
                    <NavLink href="/users" class="text-link">View all</NavLink>
                </div>
            }
            else
            {
                <p class="text-gray-500 text-sm text-center py-8">No users available</p>
            }
        </div>
    </div>
</div>

@code {
    RealTimeMap realTimeMap = new RealTimeMap();
    private string selectedCategory = "All";
    private string selectedDistrict = "All";
    private string selectedStatus = "All";

    private List<string> categories = new() { "All", "Incendio", "Furto", "Inondazione" };
    private List<string> districts = new() { "All", "Centro", "San Paolo", "Navigli", "Isola" };
    private List<string> statuses = Enum.GetNames(typeof(ReportStatusEnum)).Prepend("All").ToList();


    RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters()
        {
            location = new RealTimeMap.Location()
            {
                latitude = 45.6982642,
                longitude = 9.6772698,
            },
            zoomLevel = 18
        };

    RealTimeMap.MapOptions options = new RealTimeMap.MapOptions()
        {
            interactionOptions = new RealTimeMap.InteractionOptions()
            {
                doubleClickZoom = true,
                shiftBoxZoom = false,
            },
        };

    private List<object> reports = new List<object>();
    private List<object> users = new List<object>();
    private bool showDemo = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (showDemo)
            {
                AddDemoReports();
                AddDemoUsers();
                StateHasChanged();
            }
        }
    }

    private void AddDemoReports()
    {
        for (int i = 0; i < 7; i++)
        {
            reports.Add(new { });
        }
    }

    private void AddDemoUsers()
    {
        for (int i = 0; i < 5; i++)
        {
            users.Add(new { });
        }
    }

    private void AddReport()
    {
        reports.Add(new { });
        StateHasChanged();
    }

    private void ApplyFilters()
    {
        // Replace this with real filtering once reports have actual data
        Console.WriteLine($"Filtro applicato: Categoria={selectedCategory}, Quartiere={selectedDistrict}, Stato={selectedStatus}");
        // You can filter `reports` list here if it contains real data
    }

}
